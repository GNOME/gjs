services:
  - docker

stages:
- source_check
- test
- thorough_tests
- delivery

.CI_header: &CI_header  'echo;
       echo "*********************************************";
       echo "***     JavaScript bindings for GNOME     ***";
       echo "***        Continuous Integration         ***";
       echo "*********************************************";
       echo;
    '
.CI_footer: &CI_footer 'echo;
       echo "*********************************************";
       echo "***             See you soon              ***";
       echo "*********************************************";
    '

.JHBuild files: &JHB_files  [.cache/jhbuild/build/gjs/*.log, .cache/jhbuild/build/gjs/Makefile, .cache/jhbuild/build/gjs/configure]
.Coverage files: &cov_files [.cache/jhbuild/build/gjs/*.log, .cache/jhbuild/build/gjs/Makefile, .cache/jhbuild/build/gjs/configure, coverage/]
.Regular files: &reg_files  [configure, Makefile, analysis/, ./*.log, gjs-1.*/_build/sub/test-suite.log]
.Flatpak files: &pak_files  [./*.flatpak]

.jhbuild: &jhbuild
  artifacts:
    name: log_jhbuild
    when: always
    paths: *JHB_files

.coverage: &coverage
  artifacts:
    name: log_coverage
    when: always
    paths: *cov_files

.package: &package
  artifacts:
    name: log_package
    paths: *pak_files

.build: &build
  when: on_success
  artifacts:
    name: log
    when: always
    paths: *reg_files

  script:
    # CI starts here. Previous messages are from GitLab Runner setup.
    - *CI_header

    # GitLab is keeping some files between jobs. Remove them.
    - rm -rf configure Makefile *.log analysis

    # Run static code analysis	OR
    # Build GJS
    - 'if [[ -n "${CODECHECK}" ]]; then
         $(pwd)/test/test-ci.sh "$CODECHECK";
       else
         $(pwd)/test/test-ci.sh GJS;
       fi
    '

    # Run installed extra tests
    - 'if [[ $BUILD_OPTS == *"--enable-installed-tests"* ]]; then
         $(pwd)/test/test-ci.sh GJS_EXTRA;
       fi
    '

    # Run code coverage tests
    - 'if [[ $BUILD_OPTS == *"--enable-code-coverage"* ]]; then
         $(pwd)/test/test-ci.sh GJS_COVERAGE;
       fi
    '

    # Run valgrind
    - 'if [[ $BUILD_OPTS == *"--enable-valgrind"* ]]; then
         $(pwd)/test/test-ci.sh VALGRIND;
       fi
    '

    # Done
    - *CI_footer

#############################################
# Run a test despite of any Docker image change
# SpiderMonkey was configured with --enable-debug
#############################################
fedora:
  <<: *build
  stage: source_check
  image: claudioandre/spidermonkey:job-456.7  # pinned on purpose
  variables:
    TEST: "check"
    WARNINGS: "count"

#############################################
# Regular tests
#############################################
fedora_clang:
  <<: *build
  stage: test
  image: claudioandre/spidermonkey:new-342.4  # temporarily pinned to old tag
  variables:
    CC: clang
    TEST: "distcheck"

sanitizer_gcc:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    TEST: "check"
    BUILD_OPTS: "--enable-asan --enable-ubsan"

# There are a lot of debug log statements that are ifdef'd out in normal usage.
# These sometimes get invalid expressions in them, leading to annoyance the
# next time you try to use debug logging.
with_logging:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    BUILD_OPTS: CPPFLAGS='-DGJS_VERBOSE_ENABLE_PROPS=1 -DGJS_VERBOSE_ENABLE_MARSHAL=1 -DGJS_VERBOSE_ENABLE_LIFECYCLE=1 -DGJS_VERBOSE_ENABLE_GI_USAGE=1 -DGJS_VERBOSE_ENABLE_CLOSURE=1 -DGJS_VERBOSE_ENABLE_GSIGNAL=1'

# Generates
# The Code Coverage Report
coverage:
  <<: *build
  <<: *coverage
  stage: thorough_tests
  image: claudioandre/spidermonkey:ubuntu.dev.gcc
  variables:
    BUILD_OPTS: "--enable-code-coverage"
    coverage: '/^Lines:.\d+.\d+.(\d+\.\d+\%)/'
  except:
    - /^wip\/.*/

# Publish
# The Coverage Report generated above
pages:
  stage: delivery
  dependencies:
    - coverage
  script:
    - mv $(pwd)/coverage/ public/
  artifacts:
    paths:
      - public
  only:
    - master@GNOME/gjs

ubuntu_gcc:
  <<: *build
  stage: test
  image: claudioandre/spidermonkey:ubuntu.dev.gcc
  variables:
    TEST: "distcheck"
  only:
    - master@GNOME/gjs

ubuntu_clang:
  <<: *build
  stage: test
  image: claudioandre/spidermonkey:ubuntu.dev.gcc
  variables:
    CC: clang
    TEST: "distcheck"
  only:
    - master@GNOME/gjs

sanitizer_clang:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:new-342.4  # temporarily pinned to old tag
  variables:
    CC: clang
    TEST: "check"
    BUILD_OPTS: "--enable-asan --enable-ubsan"
  only:
    - master@GNOME/gjs

codequality:
  stage: thorough_tests
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay
  services:
    - docker:dind
  script:
    - docker pull codeclimate/codeclimate
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]
  only:
    - master@GNOME/gjs

#############################################
# Static Analyzers
#############################################
cppcheck:
  <<: *build
  stage: source_check
  image: claudioandre/spidermonkey:fedora.static.analysis
  variables:
    CODECHECK: "CPPCHECK"

cpplint:
  <<: *build
  stage: source_check
  image: claudioandre/spidermonkey:fedora.static.analysis
  variables:
    CODECHECK: "CPPLINT"

eslint:
  <<: *build
  stage: source_check
  image: claudioandre/spidermonkey:fedora.static.analysis
  variables:
    CODECHECK: "ESLINT"

code_statistics:
  <<: *build
  stage: source_check
  image: claudioandre/spidermonkey:fedora.static.analysis
  variables:
    CODECHECK: "TOKEI"
  only:
    - master@GNOME/gjs

#############################################
# Optional / Manual CI tests
#############################################
valgrind:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    BUILD_OPTS: "--enable-valgrind --disable-valgrind-helgrind --prefix=/usr"
  allow_failure: true
  when: manual

no_graphics:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    TEST: "check"
    BUILD_OPTS: "--without-cairo --without-gtk"
  when: manual

no_profiler:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    TEST: "check"
    BUILD_OPTS: "--disable-profiler"
  when: manual

installed_tests:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:ubuntu.dev.gcc
  variables:
    CC: clang
    BUILD_OPTS: "--enable-installed-tests --prefix=/usr"
  when: manual

lts:
  <<: *build
  <<: *jhbuild
  stage: thorough_tests
  image: claudioandre/spidermonkey:ubuntu.lts.gcc
  variables:
    DEV: jhbuild
    TEST: "check"
  when: manual

#############################################
# Flatpak packaging
#############################################
packaging:
  <<: *build
  <<: *package
  stage: delivery
  image: registry.gitlab.gnome.org/gnome/gnome-nightly-oci/nightly:master
  variables:
    CODECHECK: "FLATPAK"
    APPID: "org.gnome.GjsDevel"
    BUNDLE: "org.gnome.GjsDevel.flatpak"
    MANIFEST_PATH: "org.gnome.GjsDevel.json"
    RUNTIME_REPO: "https://sdk.gnome.org/gnome-nightly.flatpakrepo"

  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: https://gitlab.gnome.org/$CI_PROJECT_PATH/-/jobs/$CI_JOB_ID/artifacts/raw/${BUNDLE}
  when: manual

#############################################
# SpiderMonkey GC Tests
#############################################
zeal_2:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.debug.gcc
  variables:
    TEST: "check"
    JS_GC_ZEAL: 2
  when: manual

zeal_4:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.debug.gcc
  variables:
    TEST: "check"
    JS_GC_ZEAL: 4
  when: manual

zeal_11:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.debug.gcc
  variables:
    TEST: "check"
    JS_GC_ZEAL: 11
  when: manual

#############################################
# Multiarch Tests
#############################################
.qemu: &multiarch
  artifacts:
    name: log
    when: always
    paths: *reg_files

  image: docker:latest
  services:
    - docker:dind

  script:
    # CI starts here. Previous messages are from GitLab Runner setup.
    - *CI_header

    # Register QEMU archs
    - docker run --rm --privileged multiarch/qemu-user-static:register --reset

    # Run the multiarch test job using QEMU
    - 'docker run -v $(pwd):/cwd
          -e TEST=check $IMAGE
          bash -e -c "cd /cwd && test/test-ci.sh GJS"
    '

    # Done
    - *CI_footer

armv8:
  <<: *multiarch
  stage: thorough_tests
  variables:
    DOCKER_DRIVER: overlay
    IMAGE: "claudioandre/spidermonkey:fedora.aarch64.gcc"
  when: manual

ppc64le:
  <<: *multiarch
  stage: thorough_tests
  variables:
    DOCKER_DRIVER: overlay
    IMAGE: "claudioandre/spidermonkey:fedora.ppc64le.gcc"
  when: manual
