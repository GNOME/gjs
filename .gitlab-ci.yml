services:
  - docker

stages:
- static_analysis
- test
- build
- thorough_tests
- docs

.build: &build
  when: on_success
  artifacts:
    name: log
    when: always
    paths:
    - $(pwd)/.cache/jhbuild/build/gjs/*.log
    - $(pwd)/.cache/jhbuild/build/gjs/Makefile
    - $(pwd)/.cache/jhbuild/build/gjs/configure
    - $(pwd)/coverage/
    - $(pwd)/cppcheck/
    - $(pwd)/cpplint/
    - $(pwd)/eslint/
    - $(pwd)/tokei/
    - $(pwd)/gjs-1.*/_build/sub/test-suite.log
    - $(pwd)/*.log
    - $(pwd)/Makefile
    - $(pwd)/configure

  script:
    # CI starts here. Previous messages are GitLab Runner setup.
    - echo
    - echo "*********************************************"
    - echo "***     JavaScript bindings for GNOME     ***"
    - echo "***        Continuous Integration         ***"
    - echo "*********************************************"
    - echo

    # Run static code analysis OR
    # Build dependencies and 'make' gjs
    - 'if [[ -n "${CODECHECK}" ]]; then
         $(pwd)/test/test-ci.sh "$CODECHECK";
       else
         $(pwd)/test/test-ci.sh GJS;
       fi'

    # Run extra tests
    - 'if [[ $BUILD_OPTS == *"--enable-installed-tests"* ]]; then
         $(pwd)/test/test-ci.sh GJS_EXTRA;
       fi'

    # Run code coverage tests
    - 'if [[ $BUILD_OPTS == *"--enable-code-coverage"* ]]; then
         $(pwd)/test/test-ci.sh GJS_COVERAGE;
       fi'

fedora:
  <<: *build
  when: always
  stage: test
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    CC: gcc
    DEV: devel

ubuntu_gcc:
  <<: *build
  stage: build
  image: claudioandre/spidermonkey:ubuntu.dev.gcc
  variables:
    CC: gcc
    DEV: devel
    TEST: "distcheck"
    BUILD_OPTS: "--enable-installed-tests"
  only:
    - master@GNOME/gjs

ubuntu_clang:
  <<: *build
  stage: build
  image: claudioandre/spidermonkey:ubuntu.dev.gcc
  variables:
    CC: clang
    DEV: devel
    TEST: "distcheck"
    BUILD_OPTS: "--enable-installed-tests"
  only:
    - master@GNOME/gjs

fedora_gcc:
  <<: *build
  stage: build
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    CC: gcc
    DEV: devel
    TEST: "distcheck"
    BUILD_OPTS: "--enable-ubsan"

coverage:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.27.gcc
  variables:
    CC: gcc
    BUILD_OPTS: "--enable-code-coverage"
    coverage: '/^Lines:.\d+.\d+.(\d+\.\d+\%)/'
  except:
    - /^wip\/.*/

sanitizer_gcc:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    CC: gcc
    DEV: devel
    BUILD_OPTS: "--enable-asan --enable-ubsan"

sanitizer_clang:
  <<: *build
  stage: thorough_tests
  image: claudioandre/spidermonkey:new-342.4  # temporarily pinned to old tag
  variables:
    CC: clang
    DEV: devel
    BUILD_OPTS: "--enable-asan --enable-ubsan"

codequality:
  stage: thorough_tests
  image: docker:latest
  variables:
    DOCKER_DRIVER: overlay
  services:
    - docker:dind
  script:
    - docker pull codeclimate/codeclimate
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]
  only:
    - master@GNOME/gjs

cppcheck:
  <<: *build
  stage: static_analysis
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    CODECHECK: "CPPCHECK"

cpplint:
  <<: *build
  stage: static_analysis
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    CODECHECK: "CPPLINT"

eslint:
  <<: *build
  stage: static_analysis
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    CODECHECK: "ESLINT"

code_statistics:
  <<: *build
  stage: static_analysis
  image: claudioandre/spidermonkey:fedora.dev.gcc
  variables:
    CODECHECK: "TOKEI"
  only:
    - master@GNOME/gjs

# Publish Code Coverage Report
pages:
  stage: docs
  dependencies:
    - coverage
  script:
    - mv $(pwd)/coverage/ public/
  artifacts:
    paths:
      - public
  only:
    - master@GNOME/gjs
