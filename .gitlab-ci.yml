services:
  - docker

stages:
- source_check
- test
- thorough_tests
- manual
- deploy

.CI_header: &CI_header  'echo;
       echo "*********************************************";
       echo "***     JavaScript bindings for GNOME     ***";
       echo "***        Continuous Integration         ***";
       echo "*********************************************";
       echo;
    '
.CI_footer: &CI_footer 'echo;
       echo "*********************************************";
       echo "***             See you soon              ***";
       echo "*********************************************";
    '

.Coverage files: &cov_files [configure, Makefile, ./*.log, ./*.trs, ./installed-tests/scripts/*.log, ./installed-tests/scripts/*.trs, coverage/]
.Regular files: &reg_files  [configure, Makefile, ./*.log, ./*.trs, ./installed-tests/scripts/*.log, ./installed-tests/scripts/*.trs]

.coverage: &coverage
  artifacts:
    name: log_coverage
    when: always
    paths: *cov_files

# Regular build
.build: &build
  when: on_success
  artifacts:
    name: log
    when: always
    paths: *reg_files

  script:
    # CI starts here. Previous messages are from GitLab Runner setup.
    - *CI_header

    # GitLab is keeping some files between jobs. Remove them.
    - rm -rf configure Makefile *.log analysis

    # Run static code analysis	OR
    # Build GJS
    - 'if [[ -n "${CODECHECK}" ]]; then
         $(pwd)/test/test-ci.sh "$CODECHECK";
       else
         $(pwd)/test/test-ci.sh GJS;
       fi
    '

    # Run installed extra tests
    - 'if [[ $BUILD_OPTS == *"--enable-installed-tests"* ]]; then
         $(pwd)/test/test-ci.sh GJS_EXTRA;
       fi
    '

    # Run code coverage tests
    - 'if [[ $BUILD_OPTS == *"--enable-code-coverage"* ]]; then
         $(pwd)/test/test-ci.sh GJS_COVERAGE;
       fi
    '

    # Run valgrind
    - 'if [[ $BUILD_OPTS == *"--enable-valgrind"* ]]; then
         $(pwd)/test/test-ci.sh VALGRIND;
       fi
    '

    # Run the script tests again (to assure they are working)
    - 'if [[ -n "${SCRIPTCHECK}" ]]; then
         $(pwd)/test/test-ci.sh SH_CHECKS;
       fi
    '

    # Done
    - *CI_footer

#############################################
#               Regular tests               #
#############################################
# Test despite any changes in the Docker image
# SpiderMonkey has been configured with --enable-debug
build_recommended:
  <<: *build
  stage: source_check
  image: registry.gitlab.gnome.org/gnome/gjs:job-414163_SM60-debug-gcc.fedora-dev  # pinned on purpose
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check"
    TEST: "check"
    WARNINGS: "count"
    BUILD_OPTS: >-
      --with-cairo --enable-readline --enable-profiler
      --disable-dtrace --disable-systemtap
  except:
    - schedules

sanitizer_gcc:
  <<: *build
  stage: test
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-gcc.fedora-dev
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-ubsan_asan-check"
    BUILD_OPTS: "--enable-asan --enable-ubsan"
    TEST: "check"
  except:
    - schedules

# There are a lot of debug log statements that are ifdef'd out in normal usage.
# These sometimes get invalid expressions in them, leading to annoyance the
# next time you try to use debug logging.
build_maximal:
  <<: *build
  stage: test
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-gcc.fedora-dev
  variables:
    TASK_ID: "fedora-x86_64-clang-default-maximal-check"
    CC: clang
    BUILD_OPTS: >-
      CPPFLAGS='-DGJS_VERBOSE_ENABLE_PROPS=1 -DGJS_VERBOSE_ENABLE_MARSHAL=1 -DGJS_VERBOSE_ENABLE_LIFECYCLE=1 -DGJS_VERBOSE_ENABLE_GI_USAGE=1 -DGJS_VERBOSE_ENABLE_GCLOSURE=1 -DGJS_VERBOSE_ENABLE_GSIGNAL=1'
      --with-cairo --enable-readline --enable-profiler
      --enable-dtrace --enable-systemtap
    TEST: "check"
    SCRIPTCHECK: "yes"
    ENABLE_GTK: "yes"
  except:
    - schedules

build_minimal:
  <<: *build
  stage: test
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-gcc.fedora-dev
  variables:
    TASK_ID: "ubuntu-x86_64-gcc-default-minimal-check"
    TEST: "check"
    BUILD_OPTS: >-
      --without-cairo --disable-profiler --disable-readline
      --disable-dtrace --disable-systemtap
  except:
    - schedules

# Generates
# The Code Coverage Report
coverage-automatic:
  <<: *build
  <<: *coverage
  stage: source_check
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-gcc.fedora-dev
  variables:
    TASK_ID: "coverage"
    BUILD_OPTS: "--enable-code-coverage"
    coverage: '/^Lines:.\d+.\d+.(\d+\.\d+\%)/'
  except:
    - schedules
  only:
    refs:
      - master@GNOME/gjs

# Publishes
# The code coverage report
pages:
  stage: deploy
  dependencies:
    - coverage-automatic
  script:
    - mv $(pwd)/coverage/ public/ || true
  artifacts:
    paths:
      - public
  only:
    refs:
      - master@GNOME/gjs
  except:
    variables:
      - $CRON_TASK == "BUILD_CI_IMAGES"

#############################################
#              Static Analyzers             #
#############################################
cppcheck:
  when: on_success
  image: uilianries/docker-cppcheck
  stage: source_check
  script:
    - cppcheck . -v -f -q --error-exitcode=1 --inline-suppr --enable=warning,performance,portability
  except:
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip cppcheck\]/
  only:
    changes:
      - '**/*.c'
      - '**/*.cpp'
      - '**/*.h'

cpplint:
  <<: *build
  stage: source_check
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.static-analysis
  variables:
    TASK_ID: "cpplint"
    CODECHECK: "CPPLINT"
  except:
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip cpplint\]/
  only:
    changes:
      - '**/*.c'
      - '**/*.cpp'
      - '**/*.h'

eslint:
  when: on_success
  image: singapore/lint-condo
  stage: source_check
  script:
    - node /usr/src/lint-condo
  except:
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip eslint\]/
  only:
    changes:
      - '**/*.js'

#############################################
#                Manual Jobs                #
#############################################
# Planned as daily
codequality:
  stage: manual
  image: docker:19.03.0
  variables:
    TASK_ID: "codequality"
    DOCKER_DRIVER: overlay
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:19.03.0-dind
  script:
    - docker pull codeclimate/codeclimate
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]
  when: manual
  except:
    - schedules

coverage:
  <<: *build
  <<: *coverage
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-gcc.fedora-dev
  variables:
    TASK_ID: "coverage"
    BUILD_OPTS: "--enable-code-coverage"
    coverage: '/^Lines:.\d+.\d+.(\d+\.\d+\%)/'
  when: manual
  except:
    - schedules

sanitizer_clang:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-gcc.fedora-dev
  variables:
    TASK_ID: "fedora-x86_64-clang_ubsan_asan-default-default-check"
    CC: clang
    BUILD_OPTS: "--enable-asan --enable-ubsan"
    TEST: "check"
  when: manual
  except:
    - schedules

distcheck:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-gcc.fedora-dev
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-default-distcheck"
    TEST: "distcheck"
  when: manual
  except:
    - schedules

installed_tests:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-gcc.fedora-dev
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-default-installed_tests"
    BUILD_OPTS: "--enable-installed-tests --prefix=/usr"
  when: manual
  except:
    - schedules

valgrind:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-gcc.fedora-dev
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-default-valgrind_check"
    BUILD_OPTS: "--enable-valgrind --disable-valgrind-helgrind --prefix=/usr"
    TEST: "check"
  allow_failure: true
  when: manual
  except:
    - schedules

# SpiderMonkey GC Tests (weekly)
zeal_2:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-debug-gcc.fedora-dev
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check_zeal2"
    TEST: "check"
    JS_GC_ZEAL: 2
  when: manual
  except:
    - schedules

zeal_4:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-debug-gcc.fedora-dev
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check_zeal4"
    TEST: "check"
    JS_GC_ZEAL: 4
  when: manual
  except:
    - schedules

zeal_11:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:SM60-debug-gcc.fedora-dev
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check_zeal11"
    TEST: "check"
    JS_GC_ZEAL: 11
  when: manual
  except:
    - schedules

#############################################
#          Create CI Docker Images          #
#############################################
.Docker image template: &create_docker_image
  image: docker:19.03.0
  stage: deploy
  services:
    - docker:19.03.0-dind
  only:
    variables:
      - $CRON_TASK == "BUILD_CI_IMAGES"

  script:
    # CI starts here. Previous messages are from GitLab Runner setup.
    - *CI_header

    # Build using the Dockerfile
    - |
      if [[ -n "${DOCKERFILE}" ]]; then
        docker build -f "$DOCKERFILE" -t "$CI_REGISTRY_IMAGE:$NAME" .
      fi

    # Where the real magic happens
    - |
      if [[ -n "${IMAGE}" ]]; then
        docker run --name $NAME -v $(pwd):/on-host \
          -e OS=$IMAGE -e BUILD_OPTS=$BUILD_OPTS -e CC=gcc -e MOZJS_BRANCH=$MOZJS_BRANCH $IMAGE \
          bash -e -c "cd /on-host && test/ci-images.sh BUILD_MOZ"
        docker commit $NAME "$CI_REGISTRY_IMAGE:$NAME"
      fi

    # Prepare to publish
    - docker tag "$CI_REGISTRY_IMAGE:$NAME" "$CI_REGISTRY_IMAGE:job-"$CI_JOB_ID"_$NAME"
    - docker images
    - docker login ${CI_REGISTRY} -u ${CI_REGISTRY_USER} -p ${CI_REGISTRY_PASSWORD}

    # Publish (if running on a schedule)
    - |
      if [[ "${CI_PIPELINE_SOURCE}" == "schedule" ]]; then
        docker push "$CI_REGISTRY_IMAGE"
      fi

    # Done
    - *CI_footer

fedora.static-analysis:
  <<: *create_docker_image
  variables:
    DOCKER_DRIVER: overlay
    # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03
    DOCKER_TLS_CERTDIR: ""
    DOCKERFILE: "test/extra/Dockerfile.fedora.static-analysis"
    NAME: "fedora.static-analysis"
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip images\]/ && $CI_COMMIT_MESSAGE =~ /fedora.static-analysis/

SM60-gcc.fedora-dev:
  <<: *create_docker_image
  variables:
    DOCKER_DRIVER: overlay
    # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03
    DOCKER_TLS_CERTDIR: ""
    IMAGE: "fedora:rawhide"
    NAME: "SM60-gcc.fedora-dev"
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip images\]/ && $CI_COMMIT_MESSAGE =~ /SM60-gcc.fedora-dev/

SM60-debug-gcc.fedora-dev:
  <<: *create_docker_image
  variables:
    BUILD_OPTS: "--enable-debug"
    DOCKER_DRIVER: overlay
    # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03
    DOCKER_TLS_CERTDIR: ""
    IMAGE: "fedora:rawhide"
    NAME: "SM60-debug-gcc.fedora-dev"
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip images\]/ && $CI_COMMIT_MESSAGE =~ /SM60-debug-gcc.fedora-dev/
