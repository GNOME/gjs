# SPDX-License-Identifier: MIT OR LGPL-2.0-or-later
---
stages:
- source_check
- test
- thorough_tests
- manual
- deploy

.coverage: &coverage
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  variables:
    TASK_ID: "coverage"
    coverage: '/^  lines.*(\d+\.\d+\%)/'
  script:
    - export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
    - 'export DISPLAY="${DISPLAY:-:0}"'
    # This script runs the build inside its own build tree and generates the
    # coverage report
    - xvfb-run -a tools/run_coverage.sh
  artifacts:
    name: log_coverage
    when: always
    paths:
      - _coverage/html
      - _coverage_build/meson-logs/*log*.txt

.build: &build
  when: on_success
  artifacts:
    name: log
    when: always
    paths:
      - _build/compile_commands.json
      - _build/meson-logs/*log*.txt
      - scripts.log
  script:
    - test/test-ci.sh SETUP
    - test/test-ci.sh BUILD

#############################################
#               Regular tests               #
#############################################
# Test despite any changes in the Docker image
# SpiderMonkey has been configured with --enable-debug
build_recommended:
  <<: *build
  stage: source_check
  image: registry.gitlab.gnome.org/gnome/gjs:job-852132_fedora.mozjs78-debug  # pinned on purpose
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check"
    TEST_OPTS: --verbose --no-stdsplit --print-errorlogs
  except:
    - schedules

sanitizer_gcc:
  <<: *build
  stage: test
  tags:
    - asan # LSAN needs CAP_SYS_PTRACE
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-ubsan_asan-check"
    CONFIG_OPTS: -Db_sanitize=address,undefined
  except:
    - schedules

# There are a lot of debug log statements that are ifdef'd out in normal usage.
# These sometimes get invalid expressions in them, leading to annoyance the
# next time you try to use debug logging.
build_maximal:
  <<: *build
  stage: test
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  variables:
    TASK_ID: "fedora-x86_64-clang-default-maximal-check"
    CC: clang
    CXX: clang++
    CONFIG_OPTS: -Ddtrace=true -Dsystemtap=true -Dverbose_logs=true
    ENABLE_GTK: "yes"
  except:
    - schedules
  script:
    - test/test-ci.sh SETUP
    - test/test-ci.sh BUILD
    - test/test-ci.sh SH_CHECKS

build_minimal:
  <<: *build
  stage: test
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78
  variables:
    TASK_ID: "ubuntu-x86_64-gcc-default-minimal-check"
    CONFIG_OPTS: >-
      -Dbuildtype=release
      -Dcairo=disabled -Dreadline=disabled -Dprofiler=disabled
  except:
    - schedules

# Generates
# The Code Coverage Report
coverage-automatic:
  <<: *coverage
  when: on_success
  stage: source_check
  except:
    - schedules
  only:
    refs:
      - master@GNOME/gjs

# Publishes
# The code coverage report
pages:
  stage: deploy
  dependencies:
    - coverage-automatic
  script:
    - mv $(pwd)/_coverage/html/ public/ || true
  artifacts:
    paths:
      - public
  only:
    refs:
      - master@GNOME/gjs
  except:
    variables:
      - $CRON_TASK == "BUILD_CI_IMAGES"

#############################################
#              Static Analyzers             #
#############################################
cppcheck:
  when: on_success
  image: uilianries/docker-cppcheck
  stage: source_check
  script:
    - cppcheck . -v -f -q --error-exitcode=1 --inline-suppr --enable=warning,performance,portability
  except:
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip cppcheck\]/
  only:
    changes:
      - '**/*.c'
      - '**/*.cpp'
      - '**/*.h'

cpplint:
  when: on_success
  stage: source_check
  image: registry.gitlab.gnome.org/gnome/gjs:alpine.cpplint
  variables:
    TASK_ID: "cpplint"
  script:
    - test/test-ci.sh CPPLINT
  except:
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip cpplint\]/
  only:
    changes:
      - '**/*.c'
      - '**/*.cpp'
      - '**/*.h'

eslint:
  when: on_success
  image: node:12
  stage: source_check
  script:
    - ./tools/run_eslint.sh
  except:
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip eslint\]/
  only:
    changes:
      - '**/*.js'
      - .eslintignore
      - .eslintrc.yml
      - '**/.eslintrc.yml'

iwyu:
  when: on_success
  stage: source_check
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  script:
    - git remote add upstream https://gitlab.gnome.org/GNOME/gjs || git remote set-url upstream https://gitlab.gnome.org/GNOME/gjs
    - git fetch upstream
    - ./tools/run_iwyu.sh upstream/master
  only:
    - branches
  except:
    - schedules
    - /^gnome-\d+-\d+$/

#############################################
#                Manual Jobs                #
#############################################
# Planned as daily
coverage:
  <<: *coverage
  stage: manual
  when: manual
  except:
    - schedules

iwyu-full:
  when: manual
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  script:
    - ./tools/run_iwyu.sh
  except:
    - schedules

sanitizer_clang:
  <<: *build
  stage: manual
  tags:
    - asan # LSAN needs CAP_SYS_PTRACE
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  variables:
    TASK_ID: "fedora-x86_64-clang_ubsan_asan-default-default-check"
    CC: clang
    CXX: clang++
    CONFIG_OPTS: -Db_sanitize=address,undefined -Db_lundef=false
  when: manual
  except:
    - schedules

installed_tests:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-default-installed_tests"
    CONFIG_OPTS: -Dinstalled_tests=true -Dprefix=/usr
    TEST: skip
  when: manual
  except:
    - schedules
  script:
    - test/test-ci.sh SETUP
    - test/test-ci.sh BUILD
    - sudo ninja -C _build install
    - xvfb-run -a dbus-run-session -- gnome-desktop-testing-runner gjs

valgrind:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-default-valgrind_check"
    TEST_OPTS: --setup=valgrind
  allow_failure: true
  when: manual
  except:
    - schedules

# SpiderMonkey GC Tests (weekly)
zeal_2:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check_zeal2"
    TEST_OPTS: --setup=extra_gc
  when: manual
  except:
    - schedules

zeal_4:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check_zeal4"
    TEST_OPTS: --setup=pre_verify
  when: manual
  except:
    - schedules

zeal_11:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs78-debug
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check_zeal11"
    TEST_OPTS: --setup=post_verify
  when: manual
  except:
    - schedules

#############################################
#          Create CI Docker Images          #
#############################################
.Docker image template: &create_docker_image
  image: registry.fedoraproject.org/fedora:32
  stage: deploy
  only:
    variables:
      - $CRON_TASK == "BUILD_CI_IMAGES"

  script:
    - dnf install -y buildah runc

    # Newer versions of podman/buildah try to set overlayfs mount options when
    # using the vfs driver, and this causes errors.
    - sed -i '/^mountopt =.*/d' /etc/containers/storage.conf

    # Where the real magic happens
    - buildah bud -f $DOCKERFILE -t "$CI_REGISTRY_IMAGE:$CI_JOB_NAME" $ARGS

    # Prepare to publish
    - buildah tag "$CI_REGISTRY_IMAGE:$CI_JOB_NAME" "$CI_REGISTRY_IMAGE:job-${CI_JOB_ID}_$CI_JOB_NAME"
    - buildah images
    - buildah login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

    # Publish (if running on a schedule)
    - |
      if [[ "$CI_PIPELINE_SOURCE" == "schedule" ]]; then
        buildah push "$CI_REGISTRY_IMAGE:$CI_JOB_NAME"
        buildah push "$CI_REGISTRY_IMAGE:job-${CI_JOB_ID}_$CI_JOB_NAME"
      fi

.Docker variables: &docker_variables
  STORAGE_DRIVER: vfs
  BUILDAH_FORMAT: docker
  BUILDAH_ISOLATION: chroot

alpine.cpplint:
  <<: *create_docker_image
  variables:
    <<: *docker_variables
    DOCKERFILE: test/extra/Dockerfile.alpine.cpplint

fedora.mozjs68:
  <<: *create_docker_image
  variables:
    <<: *docker_variables
    DOCKERFILE: test/extra/Dockerfile

fedora.mozjs68-debug:
  <<: *create_docker_image
  variables:
    <<: *docker_variables
    DOCKERFILE: test/extra/Dockerfile.debug

fedora.mozjs78:
  <<: *create_docker_image
  variables:
    <<: *docker_variables
    DOCKERFILE: test/extra/Dockerfile
    ARGS: --build-arg MOZJS_BRANCH=mozjs78 --build-arg BUILD_OPTS=

fedora.mozjs78-debug:
  <<: *create_docker_image
  variables:
    <<: *docker_variables
    DOCKERFILE: test/extra/Dockerfile.debug
    ARGS: --build-arg MOZJS_BRANCH=mozjs78 --build-arg BUILD_OPTS=
