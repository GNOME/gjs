services:
  - docker

stages:
- source_check
- test
- thorough_tests
- manual
- deploy

.Autotools files: &autotools_files  [configure, Makefile, ./*.log, ./*.trs, ./installed-tests/scripts/*.log, ./installed-tests/scripts/*.trs]

.coverage: &coverage
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60
  variables:
    TASK_ID: "coverage"
    coverage: '/^  lines.*(\d+\.\d+\%)/'
  script:
    - export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig
    - export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/lib
    # This script runs the build inside its own build tree and generates the
    # coverage report
    - tools/run_coverage.sh
  artifacts:
    name: log_coverage
    when: always
    paths:
      - _coverage/html
      - _coverage_build/meson-logs/*log.txt

# Autotools build
.autotools: &autotools
  when: on_success
  artifacts:
    name: log
    when: always
    paths: &autotools_files

  script:
    # GitLab is keeping some files between jobs. Remove them.
    - rm -rf configure Makefile *.log analysis

    # Build GJS
    - test/test-ci.sh GJS

    # Run installed extra tests
    - 'if [[ $BUILD_OPTS == *"--enable-installed-tests"* ]]; then
         $(pwd)/test/test-ci.sh GJS_EXTRA;
       fi
    '

    # Run valgrind
    - 'if [[ $BUILD_OPTS == *"--enable-valgrind"* ]]; then
         $(pwd)/test/test-ci.sh VALGRIND;
       fi
    '

    # Run the script tests again (to assure they are working)
    - 'if [[ -n "${SCRIPTCHECK}" ]]; then
         $(pwd)/test/test-ci.sh SH_CHECKS;
       fi
    '

# Meson build
.build: &build
  when: on_success
  artifacts:
    name: log
    when: always
    paths:
      - _build/compile_commands.json
      - _build/meson-logs/*log.txt
      - compilation.log
      - scripts.log
  script:
    - test/test-ci.sh SETUP
    - test/test-ci.sh BUILD

#############################################
#               Regular tests               #
#############################################
# Test despite any changes in the Docker image
# SpiderMonkey has been configured with --enable-debug
build_recommended:
  <<: *build
  stage: source_check
  image: registry.gitlab.gnome.org/gnome/gjs:job-443296_fedora.mozjs60-debug  # pinned on purpose
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check"
    WARNINGS: "count"
  except:
    - schedules

sanitizer_gcc:
  <<: *build
  stage: test
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-ubsan_asan-check"
    CONFIG_OPTS: -Db_sanitize=address,undefined
  except:
    - schedules

# There are a lot of debug log statements that are ifdef'd out in normal usage.
# These sometimes get invalid expressions in them, leading to annoyance the
# next time you try to use debug logging.
build_maximal:
  <<: *build
  stage: test
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60-debug
  variables:
    TASK_ID: "fedora-x86_64-clang-default-maximal-check"
    CC: clang
    CONFIG_OPTS: -Ddtrace=true -Dsystemtap=true -Dverbose_logs=true
    ENABLE_GTK: "yes"
  except:
    - schedules
  script:
    - test/test-ci.sh SETUP
    - test/test-ci.sh BUILD
    - test/test-ci.sh SH_CHECKS

build_minimal:
  <<: *build
  stage: test
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60
  variables:
    TASK_ID: "ubuntu-x86_64-gcc-default-minimal-check"
    CONFIG_OPTS: >-
      -Dbuildtype=release
      -Dcairo=disabled -Dreadline=disabled -Dprofiler=disabled
  except:
    - schedules

build_autotools:
  <<: *autotools
  stage: test
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60
  variables:
    TASK_ID: "fedora-x86_64-gcc-autotools-check"
    BUILD_OPTS: >-
      CPPFLAGS='-DGJS_VERBOSE_ENABLE_PROPS=1 -DGJS_VERBOSE_ENABLE_MARSHAL=1 -DGJS_VERBOSE_ENABLE_LIFECYCLE=1 -DGJS_VERBOSE_ENABLE_GI_USAGE=1 -DGJS_VERBOSE_ENABLE_GCLOSURE=1 -DGJS_VERBOSE_ENABLE_GSIGNAL=1'
      --with-cairo --enable-readline --enable-profiler
      --enable-dtrace --enable-systemtap
    TEST: check
  except:
    - schedules

# Generates
# The Code Coverage Report
coverage-automatic:
  <<: *coverage
  when: on_success
  stage: source_check
  except:
    - schedules
  only:
    refs:
      - master@GNOME/gjs

# Publishes
# The code coverage report
pages:
  stage: deploy
  dependencies:
    - coverage-automatic
  script:
    - mv $(pwd)/_coverage/html/ public/ || true
  artifacts:
    paths:
      - public
  only:
    refs:
      - master@GNOME/gjs
  except:
    variables:
      - $CRON_TASK == "BUILD_CI_IMAGES"

#############################################
#              Static Analyzers             #
#############################################
cppcheck:
  when: on_success
  image: uilianries/docker-cppcheck
  stage: source_check
  script:
    - cppcheck . -v -f -q --error-exitcode=1 --inline-suppr --enable=warning,performance,portability
  except:
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip cppcheck\]/
  only:
    changes:
      - '**/*.c'
      - '**/*.cpp'
      - '**/*.h'

cpplint:
  when: on_success
  stage: source_check
  image: registry.gitlab.gnome.org/gnome/gjs:alpine.cpplint
  variables:
    TASK_ID: "cpplint"
  script:
    - test/test-ci.sh CPPLINT
  except:
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip cpplint\]/
  only:
    changes:
      - '**/*.c'
      - '**/*.cpp'
      - '**/*.h'

eslint:
  when: on_success
  image: singapore/lint-condo
  stage: source_check
  script:
    - node /usr/src/lint-condo
  except:
    refs:
      - schedules
      - tags
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip eslint\]/
  only:
    changes:
      - '**/*.js'

#############################################
#                Manual Jobs                #
#############################################
# Planned as daily
codequality:
  stage: manual
  image: docker:19.03.0
  variables:
    TASK_ID: "codequality"
    DOCKER_DRIVER: overlay
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:19.03.0-dind
  script:
    - docker pull codeclimate/codeclimate
    - docker run --env CODECLIMATE_CODE="$PWD" --volume "$PWD":/code --volume /var/run/docker.sock:/var/run/docker.sock --volume /tmp/cc:/tmp/cc codeclimate/codeclimate analyze -f json > codeclimate.json
  artifacts:
    paths: [codeclimate.json]
  when: manual
  except:
    - schedules

coverage:
  <<: *coverage
  stage: manual
  when: manual
  except:
    - schedules

sanitizer_clang:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60
  variables:
    TASK_ID: "fedora-x86_64-clang_ubsan_asan-default-default-check"
    CC: clang
    CONFIG_OPTS: -Db_sanitize=address,undefined -Db_lundef=false
  when: manual
  except:
    - schedules

distcheck:
  <<: *autotools
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-default-distcheck"
    TEST: "distcheck"
  when: manual
  except:
    - schedules

installed_tests:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-default-installed_tests"
    CONFIG_OPTS: -Dinstalled_tests=true -Dprefix=/usr
    TEST: skip
    LD_LIBRARY_PATH: $LD_LIBRARY_PATH:/usr/local/lib  # for mozjs60
  when: manual
  except:
    - schedules
  script:
    - test/test-ci.sh SETUP
    - test/test-ci.sh BUILD
    - ninja -C _build install
    - xvfb-run -a dbus-run-session -- gnome-desktop-testing-runner gjs

valgrind:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60
  variables:
    TASK_ID: "fedora-x86_64-gcc-default-default-valgrind_check"
    TEST_OPTS: --setup=valgrind
  allow_failure: true
  when: manual
  except:
    - schedules

# SpiderMonkey GC Tests (weekly)
zeal_2:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60-debug
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check_zeal2"
    TEST_OPTS: --setup=extra_gc
  when: manual
  except:
    - schedules

zeal_4:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60-debug
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check_zeal4"
    TEST_OPTS: --setup=pre_verify
  when: manual
  except:
    - schedules

zeal_11:
  <<: *build
  stage: manual
  image: registry.gitlab.gnome.org/gnome/gjs:fedora.mozjs60-debug
  variables:
    TASK_ID: "fedora-x86_64-gcc-debug-default-check_zeal11"
    TEST_OPTS: --setup=post_verify
  when: manual
  except:
    - schedules

#############################################
#          Create CI Docker Images          #
#############################################
.Docker image template: &create_docker_image
  image: docker:19.03.0
  stage: deploy
  services:
    - docker:19.03.0-dind
  only:
    variables:
      - $CRON_TASK == "BUILD_CI_IMAGES"

  script:
    # Where the real magic happens
    - docker run --name "$NAME" -v "$(pwd):/on-host" -e OS="$IMAGE" -e BUILD_OPTS="$BUILD_OPTS" -e CC=gcc -e MOZJS_BRANCH="$MOZJS_BRANCH" "$IMAGE" bash -e -c "cd /on-host && test/ci-images.sh"
    - docker commit "$NAME" "$CI_REGISTRY_IMAGE:$NAME"

    # Prepare to publish
    - docker tag "$CI_REGISTRY_IMAGE:$NAME" "$CI_REGISTRY_IMAGE:job-${CI_JOB_ID}_$NAME"
    - docker images
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"

    # Publish (if running on a schedule)
    - |
      if [[ "$CI_PIPELINE_SOURCE" == "schedule" ]]; then
        docker push "$CI_REGISTRY_IMAGE"
      fi

alpine.cpplint:
  <<: *create_docker_image
  script:
    # Overrides the script from create_docker_image above
    - docker build -f test/extra/Dockerfile.alpine.cpplint -t "$CI_REGISTRY_IMAGE:alpine.cpplint" .
    - docker tag "$CI_REGISTRY_IMAGE:alpine.cpplint" "$CI_REGISTRY_IMAGE:job-${CI_JOB_ID}_alpine.cpplint"
    - docker images
    - docker login "$CI_REGISTRY" -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD"
    - |
      if [[ "$CI_PIPELINE_SOURCE" == "schedule" ]]; then
        docker push "$CI_REGISTRY_IMAGE"
      fi
  variables:
    DOCKER_DRIVER: overlay
    # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03
    DOCKER_TLS_CERTDIR: ""
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip images\]/ && $CI_COMMIT_MESSAGE =~ /alpine.cpplint/

fedora.mozjs60:
  <<: *create_docker_image
  variables:
    DOCKER_DRIVER: overlay
    # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03
    DOCKER_TLS_CERTDIR: ""
    IMAGE: "fedora:rawhide"
    NAME: "fedora.mozjs60"
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip images\]/ && $CI_COMMIT_MESSAGE =~ /fedora.mozjs60/

fedora.mozjs60-debug:
  <<: *create_docker_image
  variables:
    BUILD_OPTS: "--enable-debug"
    DOCKER_DRIVER: overlay
    # https://about.gitlab.com/2019/07/31/docker-in-docker-with-docker-19-dot-03
    DOCKER_TLS_CERTDIR: ""
    IMAGE: "fedora:rawhide"
    NAME: "fedora.mozjs60-debug"
  except:
    variables:
      - $CI_COMMIT_MESSAGE =~ /\[skip images\]/ && $CI_COMMIT_MESSAGE =~ /fedora.mozjs60-debug/
