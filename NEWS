Version 1.56.1
--------------

- Closed bugs and merge requests:
  * Calling dumpHeap() on non-existent directory causes crash [#134, !277,
    Philip Chimento]
  * Using Gio.MemoryInputStream.new_from_data ("string") causes segfault [#221,
    !278, Philip Chimento]
  * Fix gjs_context_eval() for non-zero-terminated strings [!281, Philip
    Chimento]

Version 1.56.0
--------------

- No change from 1.55.92.

Version 1.55.92
---------------

- Closed bugs and merge requests:
  * Fix CI failures [!269, Philip Chimento]
  * Possible memory allocation/deallocation bug (possibly in js_free() in GJS)
    [!270, Chun-wei Fan, Philip Chimento]
  * cairo-context: Special-case 0-sized vector [!271, Florian Müllner]
  * Add some more eslint rules [!272, Florian Müllner]
  * win32/NMake: Fix introspection builds [!274, Chun-wei Fan]
  * NMake/libgjs-private: Export all the public symbols there [!275, Chun-wei
    Fan]

Version 1.55.91
---------------

- The problem of freezing while running the tests using GCC's sanitizers was
  determined to be a bug in GCC, which was fixed in GCC 9.0.1.

- Closed bugs and merge requests:
  * gnome-sound-recorder crashes deep inside libgjs [#223, !266, Philip
    Chimento]
  * Various maintenance [!267, Philip Chimento]
  * wrapperutils: Define $gtype property as non-enumerable [!268, Philip
    Chimento]

Version 1.55.90
---------------

- New JS API: It's now possible to call and implement DBus methods whose
  parameters or return types include file descriptor lists (type signature 'h'.)
  This involves passing or receiving a Gio.UnixFDList instance along with the
  parameters or return values.

  To call a method with a file descriptor list, pass the Gio.UnixFDList along
  with the rest of the parameters, in any order, the same way you would pass a
  Gio.Cancellable or async callback.

  For return values, things are a little more complicated, in order to avoid
  breaking existing code. Previously, synchronously called DBus proxy methods
  would return an unpacked GVariant. Now, but only if called with a
  Gio.UnixFDList, they will return [unpacked GVariant, Gio.UnixFDList]. This
  does not break existing code because it was not possible to call a method with
  a Gio.UnixFDList before, and the return value is unchanged if not calling with
  a Gio.UnixFDList. This does mean, unfortunately, that if you have a method
  with an 'h' in its return signature but not in its argument signatures, you
  will have to call it with an empty FDList in order to receive an FDList with
  the return value, when calling synchronously.

  On the DBus service side, when receiving a method call, we now pass the
  Gio.UnixFDList received from DBus to the called method. Previously, sync
  methods were passed the parameters, and async methods were passed the
  parameters plus the Gio.DBusInvocation object. Appending the Gio.UnixFDList to
  those parameters also should not break existing code.

  See the new tests in installed-tests/js/testGDBus.js for examples of calling
  methods with FD lists.

- We have observed on the CI server that GJS 1.55.90 will hang forever while
  running the test suite compiled with GCC 9.0.0 and configured with the
  --enable-asan and --enable-ubsan arguments. This should be addressed in one of
  the following 1.55.x releases.

- Closed bugs and merge requests:
  * GDBus proxy overrides should support Gio.DBusProxy.call_with_unix_fd_list()
    [#204, !263, Philip Chimento]
  * Add regression tests for GObject vfuncs [!259, Jason Hicks]
  * GjsPrivate: Sources should be C files [!262, Philip Chimento]
  * build: Vendor last-good version of AX_CODE_COVERAGE [!264, Philip Chimento]

Version 1.55.4
--------------

- Closed bugs and merge requests:
  * Various maintenance [!258, Philip Chimento]
  * Boxed copy constructor should not be called, split Boxed into prototype and
    instance structs [#215, !260, Philip Chimento]

Version 1.55.3
--------------

- Closed bugs and merge requests:
  * Manually constructed ByteArray toString segfaults [#219, !254, Philip
    Chimento]
  * signals: Add _signalHandlerIsConnected method [!255, Jason Hicks]
  * Various maintenance [!257, Philip Chimento]

Version 1.52.5
--------------

- This was a release consisting only of backports from the GNOME 3.30 branch to
  the GNOME 3.28 branch.

- This release includes the "Big Hammer" patch from GNOME 3.30 to reduce memory
  usage. For more information, read the blog post at
  https://feaneron.com/2018/04/20/the-infamous-gnome-shell-memory-leak/
  It was not originally intended to be backported to GNOME 3.28, but in practice
  several Linux distributions already backported it, and it has been working
  well to reduce memory usage, and the bugs have been ironed out of it.

  It does decrease performance somewhat, so if you don't want that then don't
  install this update.

- Closed bugs and merge requests:

  * Ensure not to miss the force_gc flag [#150, !132, Carlos Garnacho]
  * Make GC much more aggressive [#62, !50, Giovanni Campagna, Georges Basile
    Stavracas Neto, Philip Chimento]
  * Queue GC when a GObject reference is toggled down [#140, !114, !127, Georges
    Basile Stavracas Neto]
  * Reduce memory overhead of g_object_weak_ref() [#144, !122, Carlos Garnacho,
    Philip Chimento]
  * context: Defer and therefore batch forced GC runs [performance] [!236,
    Daniel van Vugt]
  * context: use timeout with seconds to schedule a gc trigger [!239, Marco
    Trevisan]
  * Use compacting GC on RSS size growth [!133, #151, Carlos Garnacho]
  * GType memleak fixes [!244, Marco Trevisan]

Version 1.55.2
--------------

- Closed bugs and merge requests:
  * Gnome-shell crashes on destroying cached param specs [#213, !240, Marco
    Trevisan]
  * Various maintenance [!235, !250, Philip Chimento]
  * Auto pointers builder [!243, Marco Trevisan]
  * configure.ac: Update bug link [!245, Andrea Azzarone]
  * SIGSEGV when exiting gnome-shell [#212, !247, Andrea Azzarone, Philip
    Chimento]
  * Fix build with --enable-dtrace and create CI job to ensure it doesn't break
    in the future [#196, !237, !253, Philip Chimento]
  * Delay JSString-to-UTF8 conversion [!249, Philip Chimento]
  * Annotate return values [!251, Philip Chimento]
  * Fix a regression with GError toString() [!252, Philip Chimento]
  * GType memleak fixes [!244, Marco Trevisan]
  * Atoms refactor [!233, Philip Chimento, Marco Trevisan]
  * Write a "Code Hospitable" README file [#17, !248, Philip Chimento, Andy
    Holmes, Avi Zajac]
  * object: Method lookup repeatedly traverses introspection [#54, !53, Colin
    Walters, Philip Chimento]
  * Handler of GtkEditable::insert-text signal is not run [#147, !143, Tomasz
    Miąsko, Philip Chimento]

Version 1.54.3
--------------

- Closed bugs and merge requests:
  * object: Fix write-only properties [!246, Philip Chimento]
  * SIGSEGV when exiting gnome-shell [#212, !247, Andrea Azzarone]
  * SelectionData.get_targets crashes with "Unable to resize vector" [#201,
    !241, Philip Chimento]
  * Gnome-shell crashes on destroying cached param specs [#213, !240, Marco
    Trevisan]
  * GType memleak fixes [!244, Marco Trevisan]
  * Fix build with --enable-dtrace and create CI job to ensure it doesn't break
    in the future [#196, !253, Philip Chimento]

Version 1.54.2
--------------

- Closed bugs and merge requests:
  * context: Defer and therefore batch forced GC runs [performance] [!236,
    Daniel van Vugt]
  * context: use timeout with seconds to schedule a gc trigger [!239, Marco
    Trevisan]
  * fundamental: Check if gtype is valid before using it [!242, Georges Basile
    Stavracas Neto]

- Backported a fix for a crash in the interactive interpreter when executing
  something like `throw "foo"` [Philip Chimento]

- Backported various maintenance from 3.31 [Philip Chimento]

Version 1.55.1
--------------

- New API for programs that embed GJS: gjs_memory_report(). This was already an
  internal API, but now it is exported.

- Closed bugs and merge requests:

  * object: Implement newEnumerate hook for GObject [!155, Ole Jørgen Brønner]
  * Various maintenance [!228, Philip Chimento]
  * ByteArray.toString should stop at null bytes [#195, !232, Philip Chimento]
  * Byte arrays that represent encoded strings should be 0-terminated [#203,
    !232, Philip Chimento]
  * context: Defer and therefore batch forced GC runs [performance] [!236,
    Daniel van Vugt]
  * context: use timeout with seconds to schedule a gc trigger [!239, Marco
    Trevisan]
  * arg: Add special-case for byte arrays going to C [#67, !49, Jasper
    St. Pierre, Philip Chimento]

Version 1.52.4
--------------

- This was a release consisting only of backports from the GNOME 3.30 branch to
  the GNOME 3.28 branch.

- Closed bugs and merge requests:

  * `ARGV` encoding issues [#22, !108, Evan Welsh]
  * Segfault on enumeration of GjSFileImporter properties when a searchpath
    entry contains a symlink [#154, !144, Ole Jørgen Brønner]
  * Possible refcounting bug around GtkListbox signal handlers [#24, !154,
    Philip Chimento]
  * Fix up GJS_DISABLE_JIT flag now the JIT is enabled by default in
    SpiderMonkey [!159, Christopher Wheeldon]
  * Expose GObject static property symbols. [!197, Evan Welsh]
  * Do not run linters on tagged commits [!181, Claudio André]
  * gjs-1.52.0 fails to compile against x86_64 musl systems [#132, !214, Philip
    Chimento]
  * gjs no longer builds after recent autoconf-archive updates [#149, !217,
    Philip Chimento]

Version 1.54.1
--------------

- Closed bugs and merge requests:
  * legacy: Ensure generated GType names are valid [!229, Florian Müllner]
  * Fix GJS profiler with MozJS 60 [!230, Georges Basile Stavracas Neto]
  * Regression with DBus proxies [#202, !231, Philip Chimento]

Version 1.54.0
--------------

- Compatibility fix for byte arrays: the legacy toString() behaviour of byte
  arrays returned from GObject-introspected functions is now restored. If you
  use the functionality, a warning will be logged asking you to upgrade your
  code.

- Closed bugs and merge requests:
  * byteArray: Add compatibility toString property [Philip Chimento, !227]

Version 1.53.92
---------------

- Technology preview of a GNOME 3.32 feature: native Promises for GIO-style
  asynchronous operations. This is the result of Avi Zajac's summer internship.
  To use it, you can opt in once for each specific asynchronous method, by
  including code such as the following:

      Gio._promisify(Gio.InputStream.prototype, 'read_bytes_async',
          'read_bytes_finish');

  After executing this, you will be able to use native Promises with the
  Gio.InputStream.prototype.read_async() method, simply by not passing a
  callback to it:

      try {
          let bytes = await stream.read_bytes_async(count, priority, cancel);
      } catch (e) {
          logError(e, 'Failed to read bytes');
      }

  Note that any "success" boolean return values are deleted from the array of
  return values from the async method. That is,

      let [contents, etag] = file.load_contents_async(cancel);

  whereas the callback version still returns a useless [ok, contents, etag]
  that can never be false, since on false an exception would be thrown. In the
  callback version, we must keep this for compatibility reasons.

  Note that due to a bug in GJS (https://gitlab.gnome.org/GNOME/gjs/issues/189),
  promisifying methods on Gio.File.prototype and other interface prototypes will
  not work. We provide the API Gio._LocalFilePrototype on which you can
  promisify methods that will work on Gio.File instances on the local disk only:

      Gio._promisify(Gio._LocalFilePrototype, 'load_contents_async',
          'load_contents_finish');

  We estimate this will cover many common use cases.

  Since this is a technology preview, we do not guarantee API stability with
  the version coming in GNOME 3.32. These APIs are marked with underscores to
  emphasize that they are not stable yet. Use them at your own risk.

- Closed bugs and merge requests:
  * Added promisify to GJS GIO overrides [!225, Avi Zajac]
  * Temporary fix for Gio.File.prototype [!226, Avi Zajac]

Version 1.53.91
---------------

- Closed bugs and merge requests:
  * CI: add webkit and gtk-app tests [!222, Claudio André]
  * Fix example eslint errors [!207, Claudio André, Philip Chimento]
  * Fix more "lost" GInterface properties [!223, Florian Müllner]
  * Fix --enable-installed-tests when built from a tarball [!224, Simon
    McVittie]

Version 1.53.90
---------------

- GJS now depends on SpiderMonkey 60 and requires a compiler capable of C++14.

- GJS includes a simple debugger now. It has basic stepping, breaking, and
  printing commands, that work like GDB. Activate it by running the GJS console
  interpreter with the -d or --debugger flag before the name of the JS program
  on the command line.

- New API for programs that embed GJS: gjs_context_setup_debugger_console().
  To integrate the debugger into programs that embed the GJS interpreter, call
  this before executing the JS program.

- New JavaScript features! This version of GJS is based on SpiderMonkey 60, an
  upgrade from the previous ESR (Extended Support Release) of SpiderMonkey 52.
  Here are the highlights of the new JavaScript features.
  For more information, look them up on MDN or devdocs.io.

  * New syntax
    + `for await (... of ...)` syntax is used for async iteration.
    + The rest operator is now supported in object destructuring: e.g.
      `({a, b, ...cd} = {a: 1, b: 2, c: 3, d: 4});`
    + The spread operator is now supported in object literals: e.g.
      `mergedObject = {...obj1, ...obj2};`
    + Generator methods can now be async, using the `async function*` syntax,
      or `async* f() {...}` method shorthand.
    + It's now allowed to omit the variable binding from a catch statement, if
      you don't need to access the thrown exception: `try {...} catch {}`

  * New APIs
    + Promise.prototype.finally(), popular in many third-party Promise
      libraries, is now available natively.
    + String.prototype.toLocaleLowerCase() and
      String.prototype.toLocaleUpperCase() now take an optional locale or
      array of locales.
    + Intl.PluralRules is now available.
    + Intl.NumberFormat.protoype.formatToParts() is now available.
    + Intl.Collator now has a caseFirst option.
    + Intl.DateTimeFormat now has an hourCycle option.

  * New behaviour
    + There are a lot of minor behaviour changes as SpiderMonkey's JS
      implementation conforms ever closer to ECMAScript standards. For complete
      information, read the Firefox developer release notes:
      https://developer.mozilla.org/en-US/Firefox/Releases/53#JavaScript
      https://developer.mozilla.org/en-US/Firefox/Releases/54#JavaScript
      https://developer.mozilla.org/en-US/Firefox/Releases/55#JavaScript
      https://developer.mozilla.org/en-US/Firefox/Releases/56#JavaScript
      https://developer.mozilla.org/en-US/Firefox/Releases/57#JavaScript
      https://developer.mozilla.org/en-US/Firefox/Releases/58#JavaScript
      https://developer.mozilla.org/en-US/Firefox/Releases/59#JavaScript
      https://developer.mozilla.org/en-US/Firefox/Releases/60#JavaScript

  * Backwards-incompatible changes
    + Conditional catch clauses have been removed, as they were a Mozilla
      extension which will not be standardized. This requires some attention in
      GJS programs, as previously we condoned code like `catch (e if
      e.matches(Gio.IOError, Gio.IOError.EXISTS))`  with a comment in
      overrides/GLib.js, so it's likely this is used in several places.
    + The nonstandard `for each (... in ...)` loop was removed.
    + The nonstandard legacy lambda syntax (`function(x) x*x`) was removed.
    + The nonstandard Mozilla iteration protocol was removed, as well as
      nonstandard Mozilla generators, including the Iterator and StopIteration
      objects, and the Function.prototype.isGenerator() method.
    + Array comprehensions and generator comprehensions have been removed.
    + Several nonstandard methods were removed: ArrayBuffer.slice() (but not
      the standard version, ArrayBuffer.prototype.slice()),
      Date.prototype.toLocaleFormat(), Function.prototype.isGenerator(),
      Object.prototype.watch(), and Object.prototype.unwatch().

- Many of the above backwards-incompatible changes can be caught by scanning
  your source code using https://gitlab.gnome.org/ptomato/moz60tool, or
  https://extensions.gnome.org/extension/1455/spidermonkey-60-migration-validator/

- Deprecation: the custom ByteArray is now discouraged. Instead of ByteArray,
  use Javascript's native Uint8Array. The ByteArray module still contains
  functions for converting between byte arrays, strings, and GLib.Bytes
  instances.

  The old ByteArray will continue to work as before, except that Uint8Array
  will now be returned from introspected functions that previously returned a
  ByteArray. To keep your old code working, change this:

      let byteArray = functionThatReturnsByteArray();

  to this:

      let byteArray = new ByteArray.ByteArray(functionThatReturnsByteArray());

  To port to the new code:

  * ByteArray.ByteArray -> Uint8Array
  * ByteArray.fromArray() -> Uint8Array.from()
  * ByteArray.ByteArray.prototype.toString() -> ByteArray.toString()
  * ByteArray.ByteArray.prototype.toGBytes() -> ByteArray.toGBytes()
  * ByteArray.fromString(), ByteArray.fromGBytes() remain the same

  * Unlike ByteArray, Uint8Array's length is fixed. Assigning an element past
    the end of a ByteArray would lengthen the array. Now, it is ignored.
    Instead use Uint8Array.of(), for example, this code:

        let a = ByteArray.fromArray([97, 98, 99, 100]);
        a[4] = 101;

    should be replaced by this code:

        let a = Uint8Array.from([97, 98, 99, 100]);
        a = Uint8Array.of(...a, 101);

    The length of the byte array must be set at creation time. This code will
    not work anymore:

        let a = new ByteArray.ByteArray();
        a[0] = 255;

    Instead, use "new Uint8Array(1)" to reserve the correct length.

- Closed bugs and merge requests:

  * Run tests using real software [#178, !192, Claudio André]
  * Script tests are missing some errors [#179, !192, Claudio André]
  * Create a '--disable-readline' option and use it [!196, Claudio André]
  * CI: stop using Fedora for clang builds [!198, Claudio André]
  * Expose GObject static property symbols. [!197, Evan Welsh]
  * CI fixes [!200, Claudio André]
  * Docker images creation [!201, Claudio André]
  * Get Docker images built and stored in GJS registry [#185, !203, !208,
    Claudio André, Philip Chimento]
  * Clear the static analysis image a bit more [!205, Claudio André]
  * Rename the packaging job to flatpak [!210, Claudio André]
  * Create SpiderMonkey 60 docker images [!202, Claudio André]
  * Debugger [#110, !204, Philip Chimento]
  * Add convenience g_object_set() replacement [!213, Florian Müllner]
  * Add dependencies of the real tests (examples) [!215, Claudio André]
  * CWE-126 [#174, !218, Philip Chimento]
  * gjs no longer builds after recent autoconf-archive updates [#149, !217,
    Philip Chimento]
  * gjs-1.52.0 fails to compile against x86_64 musl systems [#132, !214, Philip
    Chimento]
  * Run the GTK real tests (recently added) [!212, Claudio André]
  * Fix thorough tests failures [!220, Philip Chimento]
  * Port to SpiderMonkey 60 [#161, !199, Philip Chimento]
  * Replace ByteArray with native ES6 TypedArray [#5, !199, Philip Chimento]
  * Overriding GInterface properties broke [#186, !216, Florian Müllner, Philip
    Chimento]
  * Avoid segfault when checking for GByteArray [!221, Florian Müllner]

- Various build fixes [Philip Chimento]

Version 1.53.4
--------------

- Refactored the way GObject properties are accessed. This should be a bit more
  efficient, as property info (GParamSpec) is now cached for every object type.
  There may still be some regressions from this; please be on the lookout so
  we can fix them in the next release.

- The memory usage for each object instance has been reduced, resulting in
  several dozens of megabytes less memory usage in GNOME Shell.

- The CI pipeline was refactored, now runs a lot faster, detects more failure
  situations, builds on different architectures, uses the GitLab Docker
  registry, and publishes code coverage statistics to
  https://gnome.pages.gitlab.gnome.org/gjs/

- For contributors, the C++ style guide has been updated, and there is now a
  script in the tools/ directory that will install a Git hook to automatically
  format your code when you commit it. The configuration may not be perfect yet,
  so bear with us while we get it right.

- Closed bugs and merge requests:

  * Define GObject properties and fields as JS properties [#160, !151, Philip
    Chimento]
  * Possible refcounting bug around GtkListbox signal handlers [#24, !154,
    Philip Chimento]
  * Fix up GJS_DISABLE_JIT flag now the JIT is enabled by default in
    SpiderMonkey [!159, Christopher Wheeldon]
  * Various CI maintenance [!160, !161, !162, !169, !172, !180, !191, !193,
    Claudio André]
  * Update GJS wiki URL [!157, Seth Woodworth]
  * Build failure in GNOME Continuous [#104, !156, Philip Chimento]
  * Refactor ObjectInstance into C++ class [!158, !164, Philip Chimento]
  * Use Ubuntu in the coverage job [!163, Claudio André]
  * Remove unused files [!165, Claudio André]
  * Add a ARMv8 build test [!166, Claudio André]
  * Make CI faster [!167, Claudio André]
  * Add a PPC4LE build test [!168, Claudio André]
  * gdbus: Fix deprecated API [!170, Philip Chimento]
  * Change Docker images names pattern [#173, !174, Claudio André]
  * Assert failure on a GC_ZEAL run [#165, !173, Philip Chimento]
  * Do not run linters on tagged commits [!181, Claudio André]
  * Fail on compiler warnings [!182, Claudio André]
  * Save code statistics in GitLab Pages [!183, Claudio André]
  * Build static analysis Docker image in GitLab [!184, !185, !187, !189,
    Claudio André]
  * GNOME Shell always crashes with SIGBUS [#171, !188, Georges Basile
    Stavracas Neto]
  * Coverage badge is no longer able to show its value [#177, !186, Claudio
    André]
  * Move the Docker images creation to GitLab [!190, Claudio André]
  * Cut the Gordian knot of coding style [#172, !171, Philip Chimento]
  * Some GObect/GInterface properties broke [#182, !195, Philip Chimento]

Version 1.53.3
--------------

- This release was made from an earlier state of master, before a bug was
  introduced, while we sort out how to fix it. As a result, we don't have too
  many changes this round.

- Closed bugs and merge requests:

  * Adding multiple ESLint rules for spacing [!152, Avi Zajac]
  * Various maintenance [!153, Philip Chimento]

Version 1.53.2
--------------

- The `Template` parameter passed to `GObject.registerClass()` now accepts
  file:/// URIs as well as resource:/// URIs and byte arrays.

- New API: `gjs_get_js_version()` returns a string identifying the version of
  the underlying SpiderMonkey JS engine. The interpreter executable has also
  gained a `--jsversion` argument which will print this string.

- Several fixes for memory efficiency and performance.

- Once again we welcomed contributions from a number of first-time contributors!

- Closed bugs and merge requests:

  * Add support for file:/// uri to glade template [#108, !41, Jesus Bermudez,
    Philip Chimento]
  * Reduce memory overhead of g_object_weak_ref() [#144, !122, Carlos Garnacho,
    Philip Chimento]
  * gjs: JS_GetContextPrivate(): gjs-console killed by SIGSEGV [#148, !121,
    Philip Chimento]
  * Use compacting GC on RSS size growth [#151, !133, Carlos Garnacho]
  * Segfault on enumeration of GjSFileImporter properties when a searchpath
    entry contains a symlink [#154, !144, Ole Jørgen Brønner]
  * Compare linter jobs to correct base [#156, !140, Claudio André]
  * Various maintenance [!141, Philip Chimento]
  * Support interface signal handlers [!142, Tomasz Miąsko]
  * Remove unnecessary inline [!145, Emmanuele Bassi]
  * Add badges to the readme [!146, !147, Claudio André]
  * Fix debug logging [!148, Philip Chimento]
  * CI: add a GC zeal test [!149, Claudio André]

Version 1.53.1
--------------

- Improvements to garbage collection performance. Read for more information:
  https://feaneron.com/2018/04/20/the-infamous-gnome-shell-memory-leak/

- Now, when building a class from a UI template file (using the `Template`
  parameter passed to `GObject.registerClass()`, for example) signals defined in
  the UI template file will be automatically connected.

- As an experimental feature, we now offer a flatpak built with each GJS commit,
  including branches. You can use this to test your apps with a particular GJS
  branch before it is merged. Look for it in the "Artifacts" section of the CI
  pipeline.

- Closed bugs and merge requests:

  * Tweener: Add min/max properties [!67, Jason Hicks]
  * `ARGV` encoding issues [#22, !108, Evan Welsh]
  * Make GC much more aggressive [#62, !50, Giovanni Campagna, Georges Basile
    Stavracas Neto, Philip Chimento]
  * Queue GC when a GObject reference is toggled down [#140, !114, !127, Georges
    Basile Stavracas Neto]
  * overrides: support Gtk template callbacks [!124, Andy Holmes]
  * Ensure not to miss the force_gc flag [#150, !132, Carlos Garnacho]
  * Create a flatpak on CI [#153, !135, Claudio André]
  * Readme update [!138, Claudio André]

Version 1.52.3
--------------

- Closed bugs and merge requests:

  * Include calc.js example from Seed [!130, William Barath, Philip Chimento]
  * CI: Un-pin the Fedora Docker image [#141, !131, Claudio André]
  * Reduce overhead of wrapped objects [#142, !121, Carlos Garnacho, Philip
    Chimento]
  * Various CI changes [!134, !136, Claudio André]

Version 1.52.2
--------------

- This is an unscheuled release in order to revert a commit that causes a crash
  on exit, with some Cairo versions.

- Closed bugs and merge requests:

  * CI: pinned Fedora to old tag [!119, Claudio André]
  * heapgraph.py: adjust terminal output style [!120, Andy Holmes]
  * CI: small tweaks [!123, Claudio André]
  * Warn about compilation warnings [!125, Claudio André]
  * Miscellaneous commits [Philip Chimento, Jason Hicks]

Version 1.52.1
--------------

- This version has more changes than would normally be expected from a stable
  version. The intention of 1.52.1 is to deliver a version that runs cleaner
  under performance tools, in time for the upcoming GNOME Shell performance
  hackfest. We also wanted to deliver a stable CI pipeline before branching
  GNOME 3.28 off of master.

- Claudio André's work on the CI pipeline deserves a spotlight. We now have
  test jobs that run linters, sanitizers, Valgrind, and more; the tests are
  run on up-to-date Docker images; and the reliability errors that were plaguing
  the test runs are solved.

- In addition to System.dumpHeap(), you can now dump a heap from a running
  Javascript program by starting it with the environment variable
  GJS_DEBUG_HEAP_OUTPUT=some_name, and sending it SIGUSR1.

- heapgraph.py is a tool in the repository (not installed in distributions) for
  analyzing and graphing heap dumps, to aid with tracking down memory leaks.

- The linter CI jobs will compare your branch against GNOME/gjs@master, and fail
  if your branch added any new linter errors. There may be false positives, and
  the rules configuration is not perfect. If that's the case on your merge
  request, you can skip the appropriate linter job by adding the text
  "[skip (linter)]" in your commit message: e.g., "[skip cpplint]".

- We welcomed first merge requests from several new contributors for this
  release.

- Closed bugs and merge requests:

  * Crash when resolving promises if exception is pending [#18, !95, Philip
    Chimento]
  * gjs_byte_array_get_proto(JSContext*): assertion failed: (((void) "gjs_"
    "byte_array" "_define_proto() must be called before " "gjs_" "byte_array"
    "_get_proto()", !v_proto.isUndefined())) [#39, !92, Philip Chimento]
  * Tools for examining heap graph [#116, !61, !118, Andy Holmes, Tommi
    Komulainen, Philip Chimento]
  * Run analysis tools to prepare for release [#120, !88, Philip Chimento]
  * Add support for passing flags to Gio.DBusProxy in makeProxyWrapper [#122,
    !81, Florian Müllner]
  * Cannot instantiate Cairo.Context [#126, !91, Philip Chimento]
  * GISCAN GjsPrivate-1.0.gir fails [#128, !90, Philip Chimento]
  * Invalid read of g_object_finalized flag [#129, !117, Philip Chimento]
  * Fix race condition in coverage file test [#130, !99, Philip Chimento]
  * Linter jobs should only fail if new lint errors were added [#133, !94,
    Philip Chimento]
  * Disable all tests that depends on X if there is no XServer [#135, !109,
    Claudio André]
  * Pick a different C++ linter [#137, !102, Philip Chimento]
  * Create a CI test that builds using autotools only [!74, Claudio André]
  * CI: enable ASAN [!89, Claudio André]
  * CI: disable static analysis jobs using the commit message [!93, Claudio
    André]
  * profiler: Don't assume layout of struct sigaction [!96, James Cowgill]
  * Valgrind [!98, Claudio André]
  * Robustness of CI [!103, Claudio André]
  * CI: make a separate job for installed tests [!106, Claudio André]
  * Corrected Markdown format and added links to JHBuild in setup guide for GJS
    [!111, Avi Zajac]
  * Update tweener.js -- 48 eslint errors fixed [!112, Karen Medina]
  * Various maintenance [!100, !104, !105, !107, !110, !113, !116, Claudio
    André, Philip Chimento]

Version 1.52.0
--------------

- No changes from 1.51.92 except for the continuous integration configuration.

- Closed bugs and merge requests:

  * Various CI improvements [!84, !85, !86, !87, Claudio André]

Version 1.51.92
---------------

- Closed bugs and merge requests:

  * abort if we are called back in a non-main thread [#75, !72, Philip Chimento]
  * 3.27.91 build failure on debian/Ubuntu [#122, !73, Tim Lunn]
  * Analyze project code quality with Code Climate inside CI [#10, !77, Claudio
    André]
  * Various CI improvements [!75, !76, !79, !80, !82, !83, Claudio André]

Version 1.51.91
---------------

- Promises now resolve with a higher priority, so asynchronous code should be
  faster. [Jason Hicks]

- Closed bugs and merge requests:

  * New build 'warnings' [#117, !62, !63, Claudio André, Philip Chimento]
  * Various CI maintenance [!64, !65, !66, Claudio André, Philip Chimento]
  * profiler: Don't include alloca.h when disabled [!69, Ting-Wei Lan]
  * GNOME crash with fatal error "Finalizing proxy for an object that's
    scheduled to be unrooted: Gio.Subprocess" in gjs [#26, !70, Philip Chimento]

Version 1.51.90
---------------

- Note that all the old Bugzilla bug reports have been migrated over to GitLab.

- GJS now, once again, includes a profiler, which outputs files that can be
  read with sysprof. To use it, simply run your program with the environment
  variable GJS_ENABLE_PROFILER=1 set. If your program is a JS script that is
  executed with the interpreter, you can also pass --profile to the
  interpreter. See "gjs --help" for more info.

- New API: For programs that want more control over when to start and stop
  profiling, there is new API for GjsContext. When you create your GjsContext
  there are two construct-only properties available, "profiler-enabled" and
  "profiler-sigusr2". If you set profiler-sigusr2 to TRUE, then the profiler
  can be started and stopped while the program is running by sending SIGUSR2 to
  the process. You can also use gjs_context_get_profiler(),
  gjs_profiler_set_filename(), gjs_profiler_start(), and gjs_profiler_stop()
  for more explicit control.

- New API: GObject.signal_connect(), GObject.signal_disconnect(), and
  GObject.signal_emit_by_name() are now available in case a GObject-derived
  class has conflicting connect(), disconnect() or emit() methods.

- Closed bugs and merge requests:

  * Handle 0-valued GType gracefully [#11, !10, Philip Chimento]
  * Profiler [#31, !37, Christian Hergert, Philip Chimento]
  * Various maintenance [!40, !59, Philip Chimento, Giovanni Campagna]
  * Rename GObject.Object.connect/disconnect? [#65, !47, Giovanni Campagna]
  * Better debugging output for uncatchable exceptions [!39, Simon McVittie]
  * Update Docker images and various CI maintenance [!54, !56, !57, !58,
    Claudio André]
  * Install GJS suppression file for Valgrind [#2, !55, Philip Chimento]

Version 1.50.4
--------------

- Closed bugs and merge requests:

  * Gnome Shell crash with places-status extension when you plug an USB device
    [#33, !38, Philip Chimento]

Version 1.50.3
--------------

- GJS will now log a warning when a GObject is accessed in Javascript code
  after the underlying object has been freed in C. (This used to work most of
  the time, but crash unpredictably.) We now prevent this situation which, is
  usually caused by a memory management bug in the underlying C library.

- Closed bugs and merge requests:

  * Add checks for GObjects that have been finalized [#21, #23, !25, !28, !33,
    Marco Trevisan]
  * Test "Cairo context has methods when created from a C function" fails [#27,
    !35, Valentín Barros]
  * Various fixes from the master branch for rare crashes [Philip Chimento]

Version 1.51.4
--------------

- We welcomed code and documentation from several new contributors in this
  release!

- GJS will now log a warning when a GObject is accessed in Javascript code
  after the underlying object has been freed in C. (This used to work most of
  the time, but crash unpredictably.) We now prevent this situation which, is
  usually caused by a memory management bug in the underlying C library.

- APIs exposed through GObject Introspection that use the GdkAtom type are now
  usable from Javascript. Previously these did not work. On the Javascript side,
  a GdkAtom translates to a string, so there is no Gdk.Atom type that you can
  access. The special atom GDK_NONE translates to null in Javascript, and there
  is also no Gdk.NONE constant.

- The GitLab CI tasks have continued to gradually become more and more
  sophisticated.

- Closed bugs and merge requests:

  * Add checks for GObjects that have been finalized [#21, #23, !22, !27, Marco
    Trevisan]
  * Fail static analyzer if new warnings are found [!24, Claudio André]
  * Run code coverage on GitLab [!20, Claudio André]
  * Amend gtk.js and add gtk-application.js with suggestion [!32, Andy Holmes]
  * Improve GdkAtom support that is blocking clipboard APIs [#14, !29, makepost]
  * Test "Cairo context has methods when created from a C function" fails [#27,
    !35, Valentín Barros]
  * Various CI improvements [#6, !26, !34, Claudio André]
  * Various maintenance [!23, !36, Philip Chimento]

Version 1.51.3
--------------

- This release was made from an earlier state of master, before a breaking
  change was merged, while we decide whether to revert that change or not.

- Closed bugs and merge requests:

  * CI improvements on GitLab [!14, !15, !19, Claudio André]
  * Fix CI build on Ubuntu [#16, !18, !21, Claudio André, Philip Chimento]

Version 1.51.2
--------------

- Version 1.51.1 was skipped.

- The home of GJS is now at GNOME's GitLab instance:
  https://gitlab.gnome.org/GNOME/gjs
  From now on we'll be taking GitLab merge requests instead of Bugzilla
  patches. If you want to report a bug, please report it at GitLab.

- Closed bugs and merge requests:

  * Allow throwing GErrors from JS virtual functions [#682701, Giovanni
    Campagna]
  * [RFC] bootstrap system [#777724, Jasper St. Pierre, Philip Chimento]
  * Fix code coverage (and refactor it to take advantage of mozjs52 features)
    [#788166, !1, !3, Philip Chimento]
  * Various maintenance [!2, Philip Chimento]
  * Get GitLab CI working and various improvements [#6, !7, !9, !11, !13,
    Claudio André]
  * Add build status badge to README [!8, Claudio André]
  * Use Docker images for CI [!12, Claudio André]

- Some changes in progress to improve garbage collection when signals are
  disconnected. See bug #679688 for more information [Giovanni Campagna]

Version 1.50.2
--------------

- Closed bugs and merge requests:

  * tweener: Fix a couple of warnings [!5, Florian Müllner]
  * legacy: Allow ES6 classes to inherit from abstract Lang.Class class [!6,
    Florian Müllner]

- Minor bugfixes [Philip Chimento]

Version 1.50.1
--------------

- As a debugging aid, gjs_dumpstack() now works even during garbage collection.

- Code coverage tools did not work so well in the last few 1.49 releases. The
  worst problems are now fixed, although even more improvements will be
  released in the next unstable version. Fixes include:

  * Specifing prefixes for code coverage files now works again
  * Code coverage now works on lines inside ES6 class definitions
  * The detection of which lines are executable has been improved a bit

Version 1.50.0
--------------

- Closed bugs:

  * Relicense coverage.cpp and coverage.h to the same license as the rest of
    GJS [#787263, Philip Chimento; thanks to Dominique Leuenberger for pointing
    out the mistake]

Version 1.49.92
---------------

- It's now possible to build GJS with sanitizers (ASan and UBSan) enabled; add
  "--enable-asan" and "--enable-ubsan" to your configure flags. This has
  already caught some memory leaks.

- There's also a "make check-valgrind" target which will run GJS's test suite
  under Valgrind to catch memory leaks and threading races.

- Many of the crashes in GNOME 3.24 were caused by GJS's closure invalidation
  code which had to change from the known-working state in 1.46 because of
  changes to SpiderMonkey's garbage collector. This code has been refactored to
  be less complicated, which will hopefully improve stability and debuggability.

- Closed bugs:

  * Clean up the idle closure invalidation mess [#786668, Philip Chimento]
  * Add ASan and UBSan to GJS [#783220, Claudio André]
  * Run analysis tools on GJS to prepare for release [#786995, Philip Chimento]
  * Fix testLegacyGObject importing the GTK overrides [#787113, Philip Chimento]

- Docs tweak [Philip Chimento]

1.49.91
-------

- Deprecation: The private "__name__" property on Lang.Class instances is
  now discouraged. Code should not have been using this anyway, but if it did
  then it should use the "name" property on the class (this.__name__ should
  become this.constructor.name), which is compatible with ES6 classes.

- Closed bugs:

  * Use ES6 classes [#785652, Philip Chimento]
  * A few fixes for stack traces and error reporting [#786183, Philip Chimento]
  * /proc/self/stat is read for every frame if GC was not needed [#786017,
    Benjamin Berg]

- Build fix [Philip Chimento]

Version 1.49.90
---------------

- New API: GObject.registerClass(), intended for use with ES6 classes. When
  defining a GObject class using ES6 syntax, you must call
  GObject.registerClass() on the class object, with an optional metadata
  object as the first argument. (The metadata object works exactly like the
  meta properties from Lang.Class, except that Name and Extends are not
  present.)

  Old:

      var MyClass = new Lang.Class({
          Name: 'MyClass',
          Extends: GObject.Object,
          Signals: { 'event': {} },
          _init(props={}) {
              this._private = [];
              this.parent(props);
          },
      });

  New:

      var MyClass = GObject.registerClass({
          Signals: { 'event': {} },
      }, class MyClass extends GObject.Object {
          _init(props={}) {
              this._private = [];
              super._init(props);
          }
      });

  It is forward compatible with the following syntax requiring decorators and
  class fields, which are not in the JS standard yet:

      @GObject.registerClass
      class MyClass extends GObject.Object {
          static [GObject.signals] = { 'event': {} }
          _init(props={}) {
              this._private = [];
              super._init(props);
          }
      }

  One limitation is that GObject ES6 classes can't have constructor()
  methods, they must do any setup in an _init() method. This may be able to be
  fixed in the future.

- Closed bugs:

  * Misc 1.49 and mozjs52 enhancements [#785040, Philip Chimento]
  * Switch to native promises [#784713, Philip Chimento]
  * Can't call exports using top-level variable toString [#781623, Philip
    Chimento]
  * Properties no longer recognized when shadowed by a method [#785091, Philip
    Chimento, Rico Tzschichholz]
  * Patch: backport of changes required for use with mozjs-55 [#785424, Luke
    Jones]

Version 1.48.6
--------------

- Closed bugs:

  * GJS crash in needsPostBarrier, possible access from wrong thread [#783935,
    Philip Chimento] (again)

Version 1.49.4
--------------

- New JavaScript features! This version of GJS is based on SpiderMonkey 52, an
  upgrade from the previous ESR (Extended Support Release) of SpiderMonkey 38.
  GJS now uses the latest ESR in its engine and the plan is to upgrade again
  when SpiderMonkey 59 is released in March 2018, pending maintainer
  availability. Here are the highlights of the new JavaScript features.
  For more information, look them up on MDN or devdocs.io.

  * New language features
    + ES6 classes
    + Async functions and await operator
    + Reflect - built-in object with methods for interceptable operations

  * New syntax
    + Exponentiation operator: `**`
    + Variable-length Unicode code point escapes: `"\u{1f369}"`
    + Destructured default arguments: `function f([x, y]=[1, 2], {z: z}={z: 3})`
    + Destructured rest parameters: `function f(...[a, b, c])`
    + `new.target` allows a constructor access to the original constructor that
      was invoked
    + Unicode (u) flag for regular expressions, and corresponding RegExp.unicode
      property
    + Trailing comma in function parameter lists now allowed

  * New APIs
    + New Array, String, and TypedArray method: includes()
    + TypedArray sort(), toLocaleString(), and toString() methods, to correspond
      with regular arrays
    + New Object.getOwnPropertyDescriptors() and Object.values() methods
    + New Proxy traps: getPrototypeOf() and setPrototypeOf()
    + [Symbol.toPrimitive] property specifying how to convert an object to a
      primitive value
    + [Symbol.species] property allowing to override the default constructor
      for objects
    + [Symbol.match], [Symbol.replace], [Symbol.search], and [Symbol.split]
      properties allowing to customize matching behaviour in RegExp subclasses
    + [Symbol.hasInstance] property allowing to customize the behaviour of
      the instanceof operator for objects
    + [Symbol.toStringTag] property allowing to customize the message printed
      by Object.toString() without overriding it
    + [Symbol.isConcatSpreadable] property allowing to control the behaviour of
      an array subclass in an argument list to Array.concat()
    + [Symbol.unscopables] property allowing to control which object properties
      are lifted into the scope of a with statement
    + New Intl.getCanonicalLocales() method
    + Date.toString() and RegExp.toString() generic methods
    + Typed arrays can now be constructed from any iterable object
    + Array.toLocaleString() gained optional locales and options arguments, to
      correspond with other toLocaleString() methods

  * New behaviour
    + The "arguments" object is now iterable
    + Date.prototype, WeakMap.prototype, and WeakSet.prototype are now ordinary
      objects, not instances
    + Full ES6-compliant implementation of let keyword
    + RegExp.sticky ('y' flag) behaviour is ES6 standard, it used to be subject
      to a long-standing bug in Firefox
    + RegExp constructor with RegExp first argument and flags no longer throws
      an exception (`new RegExp(/ab+c/, 'i')` works now)
    + Generators are no longer constructible, as per ES6 (`function* f {}`
      followed by `new f` will not work)
    + It is now required to construct ArrayBuffer, TypedArray, Map, Set, and
      WeakMap with the new operator
    + Block-level functions (e.g. `{ function foo() {} }`) are now allowed in
      strict mode; they are scoped to their block
    + The options.timeZone argument to Date.toLocaleDateString(),
      Date.toLocaleString(), Date.toLocaleTimeString(), and the constructor of
      Intl.DateTimeFormat now understands IANA time zone names (such as
      "America/Vancouver")

  * Backwards-incompatible changes
    + Non-standard "let expressions" and "let blocks" (e.g.,
      `let (x = 5) { use(x) }`) are not supported any longer
    + Non-standard flags argument to String.match(), String.replace(), and
      String.search() (e.g. `str.replace('foo', 'bar', 'g')`) is now ignored
    + Non-standard WeakSet.clear() method has been removed
    + Variables declared with let and const are now 'global lexical bindings',
      as per the ES6 standard, meaning that they will not be exported in
      modules. We are maintaining the old behaviour for the time being as a
      compatibility workaround, but please change "let" or "const" to "var"
      inside your module file. A warning will remind you of this. For more
      information, read:
      https://blog.mozilla.org/addons/2015/10/14/breaking-changes-let-const-firefox-nightly-44/

  * Experimental features (may change in future versions)
    + String.padEnd(), String.padStart() methods (proposed in ES2017)
    + Intl.DateTimeFormat.formatToParts() method (proposed in ES2017)
    + Object.entries() method (proposed in ES2017)
    + Atomics, SharedArrayBuffer, and WebAssembly are disabled by default, but
      can be enabled if you compile mozjs yourself

- Closed bugs:

  * Prepare for SpiderMonkey 45 and 52 [#781429, Philip Chimento]
  * Add a static analysis tool as a make target [#783214, Claudio André]
  * Fix the build with debug logs enabled [#784469, Tomas Popela]
  * Switch to SpiderMonkey 52 [#784196, Philip Chimento, Chun-wei Fan]
  * Test suite fails when run with JIT enabled [#616193, Philip Chimento]

Version 1.48.5
--------------

- Closed bugs:

  * GJS crash in needsPostBarrier, possible access from wrong thread [#783935,
    Philip Chimento]

- Fix format string, caught by static analysis [Claudio André]
- Fixes for regression in 1.48.4 [Philip Chimento]

Version 1.49.3
--------------

- This will be the last release using SpiderMonkey 38.
- Fixes in preparation for SpiderMonkey 52 [Philip Chimento]
- Use the Centricular fork of libffi to build on Windows [Chun-wei Fan]

- Closed bugs:

  * [RFC] Use a C++ auto pointer instead of g_autofree [#777597, Chun-wei Fan,
    Daniel Boles, Philip Chimento]
  * Build failure in GNOME Continuous [#783031, Chun-wei Fan]

Version 1.48.4
--------------

- Closed bugs:

  * gnome-shell 3.24.1 crash on wayland [#781799, Philip Chimento]; thanks to
    everyone who contributed clues

Version 1.49.2
--------------

- New feature: When building an app with the Package module, using the Meson
  build system, you can now run the app with "ninja run" and all the paths will
  be set up correctly.

- New feature: Gio.ListStore is now iterable.

- New API: Package.requireSymbol(), a companion for the already existing
  Package.require(), that not only checks for a GIR library but also for a
  symbol defined in that library.

- New API: Package.checkSymbol(), similar to Package.requireSymbol() but does
  not exit if the symbol was not found. Use this to support older versions of
  a GIR library with fallback functionality.

- New API: System.dumpHeap(), for debugging only. Prints the state of the JS
  engine's heap to standard output. Takes an optional filename parameter which
  will dump to a file instead if given.

- Closed bugs:

  * Make gjs build on Windows/Visual Studio [#775868, Chun-wei Fan]
  * Bring back fancy error reporter in gjs-console [#781882, Philip Chimento]
  * Add Meson running from source support to package.js [#781882, Patrick
    Griffis]
  * package: Fix initSubmodule() when running from source in Meson [#782065,
    Patrick Griffis]
  * package: Set GSETTINGS_SCHEMA_DIR when ran from source [#782069, Patrick
    Griffis]
  * Add imports.gi.has() to check for symbol availability [#779593, Florian
    Müllner]
  * overrides: Implement Gio.ListStore[Symbol.iterator] [#782310, Patrick
    Griffis]
  * tweener: Explicitly check for undefined properties [#781219, Debarshi Ray,
    Philip Chimento]
  * Add a way to dump the heap [#780106, Juan Pablo Ugarte]

- Fixes in preparation for SpiderMonkey 52 [Philip Chimento]
- Misc fixes [Philip Chimento]

Version 1.48.3
--------------

- Closed bugs:

  * arg: don't crash when asked to convert a null strv to an array [#775679,
    Cosimo Cecchi, Sam Spilsbury]
  * gjs 1.48.0: does not compile on macOS with clang [#780350, Tom Schoonjans,
    Philip Chimento]
  * Modernize shell scripts [#781806, Claudio André]

Version 1.49.1
--------------

- Closed bugs:

  * test GObject Class failure [#693676, Stef Walter]
  * Enable incremental GCs [#724797, Giovanni Campagna]
  * Don't silently accept extra arguments to C functions [#680215, Jasper
    St. Pierre, Philip Chimento]
  * Special case GValues in signals and properties [#688128, Giovanni Campagna,
    Philip Chimento]
  * [cairo] Instantiate wrappers properly [#614413, Philip Chimento,
    Johan Dahlin]
  * Warn if we're importing an unversioned namespace [#689654, Colin Walters,
    Philip Chimento]

- Fixes in preparation for SpiderMonkey 45 [Philip Chimento]
- Misc fixes [Philip Chimento, Chun-wei Fan, Dan Winship]

Version 1.48.2
--------------

- Closed bugs:

  * Intermittent crash in gnome-shell, probably in weak pointer updating code
    [#781194, Georges Basile Stavracas Neto]
  * Add contributor's guide [#781297, Philip Chimento]

- Misc fixes [Debarshi Ray, Philip Chimento]

Version 1.48.1
--------------

- Closed bugs:

  * gjs crashed with SIGSEGV in gjs_object_from_g_object [#779918, Philip
    Chimento]

- Misc bug fixes [Florian Müllner, Philip Chimento, Emmanuele Bassi]

Version 1.48.0
--------------

- Closed bugs:

  * Memory leak in object_instance_resolve() [#780171, Philip Chimento]; thanks
    to Luke Jones and Hussam Al-Tayeb

Version 1.47.92
---------------

- Closed bugs:

  * gjs 1.47.91 configure fails with Fedora's mozjs38 [#779412, Philip Chimento]
  * tests: Don't fail when Gtk+-4.0 is available [#779594, Florian Müllner]
  * gjs 1.47.91 test failures on non-amd64 [#779399, Philip Chimento]
  * gjs_eval_thread should always be set [#779693, Philip Chimento]
  * System.exit() should exit even across main loop iterations [#779692, Philip
    Chimento]
  * Fix a typo in testCommandLine.sh [#779772, Claudio André]
  * arg: Fix accidental fallthrough [#779838, Florian Müllner]
  * jsUnit: Explicitly check if tempTop.parent is defined [#779871, Iain Lane]

- Misc bug fixes [Philip Chimento]

Version 1.47.91
---------------

- Closed bugs:

  * overrides/Gio: Provide an empty array on error, rather than null [#677513,
    Jasper St. Pierre, Philip Chimento]
  * WithSignals parameter for Lang.Class [#664897, Philip Chimento]
  * add API to better support asynchronous code [#608450, Philip Chimento]
  * 1.47.90 tests are failing [#778780, Philip Chimento]
  * boxed: Plug a memory leak [#779036, Florian Müllner]
  * Don't crash when marshalling an unsafe integer from introspection [#778705,
    Philip Chimento]
  * Lang.Class should include symbol properties [#778718, Philip Chimento]
  * Console output of arrays should be UTF-8 aware [#778729, Philip Chimento]
  * Various fixes for 1.47.91 [#779293, Philip Chimento]

- Progress towards a Visual Studio build of GJS on Windows [Chun-wei Fan]
- Misc bug fixes [Chun-wei Fan, Philip Chimento]

Version 1.47.90
---------------

- New JavaScript features! This version of GJS is based on SpiderMonkey 38, an
  upgrade from the previous ESR (Extended Support Release) of SpiderMonkey 31.
  Our plans are to continue upgrading to subsequent ESRs as maintainer
  availability allows. Here are the highlights of the new JavaScript features.
  For more information, look them up on MDN or devdocs.io.

  * New syntax
    + Shorthand syntax for method definitions: { foo() { return 5; } }
    + Shorthand syntax for object literals: let b = 42; let o = {b}; o.b === 42
    + Computed property names for the above, as well as in getter and setter
      expressions and destructuring assignment: { ['b' + 'ar']() { return 6; } }
    + Spread operator in destructuring assignment: let [a, ...b] = [1, 2, 3];
    + Template literals: `Hello, ${name}` with optional tags: tag`string`

  * New APIs
    + Symbol, a new fundamental type
    + WeakSet, a Set which does not prevent its members from being
      garbage-collected
    + [Symbol.iterator] properties for Array, Map, Set, String, TypedArray, and
      the arguments object
    + New Array and TypedArray functionality: Array.copyWithin(), Array.from()
    + New return() method for generators
    + New Number.isSafeInteger() method
    + New Object.assign() method which can replace Lang.copyProperties() in many
      cases
    + New Object.getOwnPropertySymbols() method
    + New RegExp flags, global, ignoreCase, multiline, sticky properties that
      give access to the flags that the regular expression was created with
    + String.raw, a tag for template strings similar to Python's r""
    + New TypedArray methods for correspondence with Array: entries(), every(),
      fill(), filter(), find(), findIndex(), forEach(), indexOf(), join(),
      keys(), lastIndexOf(), map(), of(), reduce(), reduceRight(), reverse(),
      slice(), some(), values()

  * New behaviour
    + Temporal dead zone: print(x); let x = 5; no longer allowed
    + Full ES6-compliant implementation of const keyword
    + The Set, Map, and WeakMap constructors can now take null as their argument
    + The WeakMap constructor can now take an iterable as its argument
    + The Function.name and Function.length properties are configurable
    + When subclassing Map, WeakMap, and Set or using the constructors on
      generic objects, they will look for custom set() and add() methods.
    + RegExp.source and RegExp.toString() now deal with empty regexes, and
      escape their output.
    + Non-object arguments to Object.preventExtensions() now do not throw an
      exception, simply return the original object

  * Backwards-incompatible changes
    + It is now a syntax error to declare the same variable twice with "let" or
      "const" in the same scope. Existing code may need to be fixed, but the
      fix is trivial.
    + SpiderMonkey is now extra vocal about warning when you access an
      undefined property, and this causes some false positives. You can turn
      this warning off by setting GJS_DISABLE_EXTRA_WARNINGS=1. If it is overly
      annoying, let me know and I will consider making it disabled by default
      in a future release.
    + When enumerating the importer object (i.e.,
      "for (let i in imports) {...}") you will now get the names of any built-in
      modules that have previously been imported. (But don't do this, anyway.)

- Closed bugs:

  * SpiderMonkey 38 prep [#776966, Philip Chimento]
  * Misc fixes [#777205, Philip Chimento]
  * missing class name in error message [#642506, Philip Chimento]
  * Add continuous integration to GJS [#776549, Claudio André]
  * Switch to SpiderMonkey 38 [#777962, Philip Chimento]

- Progress towards a build of GJS on Windows [Chun-wei Fan]
- Progress towards increasing test coverage [Claudio André]
- Misc bug fixes [Philip Chimento]

Version 1.47.4
--------------

- New JavaScript feature: ES6 Promises. This release includes Lie [1], a small,
  self-contained Promise implementation, which is imported automatically to
  form the Promise global object [2]. In the future, Promises will be built into
  the SpiderMonkey engine and Lie will be removed, but any code using Promises
  will continue to work as before.
  [1] https://github.com/calvinmetcalf/lie
  [2] https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise

- News for GJS embedders such as gnome-shell:

  * New API: The GjsCoverage type and its methods are now exposed. Use this if
    you are embedding GJS and need to output code coverage statistics.

- Closed bugs:

  * Add GjsCoverage to gjs-1.0 public API [#775776, Philip Chimento]
  * Should use uint32_t instead of u_int32_t in coverage.cpp [#776193, Shawn
    Walker, Alan Coopersmith]
  * Port tests to use an embedded copy of Jasmine [#775444, Philip Chimento]
  * support fields in GObject [#563391, Havoc Pennington, Philip Chimento]
  * Javascript errors in property getters and setter not always reported
    [#730101, Matt Watson, Philip Chimento]
  * Exception swallowed while importing Gom [#737607, Philip Chimento]
  * log a warning if addSignalMethods() replaces existing methods [#619710, Joe
    Shaw, Philip Chimento]
  * Provide a useful toString for importer and module objects [#636283, Jasper
    St. Pierre, Philip Chimento]
  * Fails to marshal out arrays [#697020, Paolo Borelli]
  * coverage: Don't warn about executing odd lines by default anymore [#751146,
    Sam Spilsbury, Philip Chimento]
  * coverage: Crash in EnterBaseline on SpiderMonkey when Ion is enabled during
    coverage mode. [#742852, Sam Spilsbury, Philip Chimento]
  * installed tests cannot load libregress.so [#776938, Philip Chimento]
  * Crash with subclassed fundamental with no introspection [#760057, Lionel
    Landwerlin]

- Misc bug fixes [Philip Chimento, Claudio André]

Version 1.47.3
--------------

- New JavaScript features! This version of GJS is based on SpiderMonkey 31, an
  upgrade from the previous ESR (Extended Support Release) of SpiderMonkey 24.
  Our plans are to continue upgrading to subsequent ESRs as maintainer
  availability allows. Here are the highlights of the new JavaScript features.
  For more information, look them up on MDN or devdocs.io.

  * New syntax
    + Spread operator in function calls: someFunction(arg1, arg2, ...iterableObj)
    + Generator functions: yield, function*, yield*
    + Binary and octal numeric literals: 0b10011100, 0o377
    + Function arguments without defaults can now come after those with
      defaults: function f(x=1, y) {}

  * New standard library module
    + Intl - Locale-sensitive formatting and string comparison

  * New APIs
    + Iterator protocol - any object implementing certain methods is an
      "iterator"
    + New Array functionality: fill(), find(), findIndex(), of()
    + New String functionality for working with Unicode: codePointAt(),
      fromCodePoint(), normalize()
    + New Array methods for correspondence with Object: entries(), keys()
    + ES6 Generator methods to replace the old Firefox-specific generator API:
      next(), throw()
    + forEach() methods for Map and Set, for correspondence with Array
    + A bunch of new Math functions: acosh(), asinh(), atanh(), cbrt(), clz32(),
      cosh(), expm1(), fround(), hypot(), log10(), log1p(), log2(), sign(),
      sinh(), tanh(), trunc()
    + Some constants to tell information about float support on the platform:
      Number.EPSILON, Number.MAX_SAFE_INTEGER, Number.MIN_SAFE_INTEGER
    + New Number.parseInt() and Number.parseFloat() which are now preferred over
      those in the global namespace
    + New Object.setPrototypeOf() which now is preferred over setting
      obj.prototype.__proto__
    + New locales and options extra arguments to all toLocaleString() and
      related methods
    + Misc new functionality: ArrayBuffer.isView(), Proxy.handler.isExtensible,
      Proxy.revocable()

  * New behaviour
    + -0 and +0 are now considered equal as Map keys and Set values
    + On typed arrays, numerical indexed properties ignore the prototype object:
      Int8Array.prototype[20] = 'foo'; (new Int8Array(32))[20] == 0

  * New non-standard Mozilla extensions
    + Array comprehensions
    + Generator comprehensions; both were originally proposed for ES6 but removed

- Backwards-incompatible change: we have changed the way certain JavaScript
  values are marshalled into GObject introspection 32 or 64-bit signed integer
  values, to match the ECMA standard. Here is the relevant section of the
  standard:
  http://www.ecma-international.org/ecma-262/7.0/index.html#sec-toint32
  Notable differences between the old and new behaviour are:

  * Floating-point numbers ending in 0.5 are rounded differently when
    marshalled into 32 or 64-bit signed integers. Previously they were
    rounded to floor(x + 0.5), now they are rounded to
    signum(x) * floor(abs(x)) as per the ECMA standard:
    http://www.ecma-international.org/ecma-262/7.0/index.html#sec-toint32
    Note that previously, GJS rounded according to the standard when
    converting to *unsigned* integers!

  * Objects whose number value is NaN (e.g, arrays of strings), would
    previously fail to convert, throwing a TypeError. Now they convert to
    0 when marshalled into 32 or 64-bit signed integers.

  Note that the new behaviour is the behaviour you got all along when using
  pure JavaScript, without any GObject introspection:

  gjs> let a = new Int32Array(2);
  gjs> a[0] = 10.5;
  10.5
  gjs> a[1] = ['this', 'is', 'fine'];
  this,is,fine
  gjs> a[0]
  10
  gjs> a[1]
  0

- News for GJS embedders such as gnome-shell:

  * New API: gjs_error_quark() is now exposed, and the error domain GJS_ERROR
    and codes GJS_ERROR_FAILED and GJS_ERROR_SYSTEM_EXIT.

  * Backwards-incompatible change: Calling System.exit() from JS code will now
    not abort the program immediately, but instead will return immediately from
    gjs_context_eval() so that you can unref your GjsContext before internal
    resources are released on exit.

    If gjs_context_eval() or gjs_context_eval_file() returns an error with code
    GJS_ERROR_SYSTEM_EXIT, it means that the JS code called System.exit(). The
    exit code will be found in the 'exit_status_p' out parameter to
    gjs_context_eval() or gjs_context_eval_file(). If you receive this error,
    you should do any cleanup needed and exit your program with the given exit
    code.

- Closed bugs:

  * spidermonkey 31 prep [Philip Chimento, Tim Lunn, #742249]
  * Please use dbus-run-session to run dbus related tests [Philip Chimento,
    #771745]
  * don't abort gdb'd tests [Philip Chimento, Havoc Pennington, #605972]
  * Use Automake test suite runner [Philip Chimento, #775205]
  * please add doc/ directory to make dist tar file [Philip Chimento, #595439]
  * support new mozjs 31.5 [Philip Chimento, #751252]
  * SEGFAULT in js::NewObjectWithClassProtoCommon when instantiating a dynamic
    type defined in JS [Philip Chimento, Juan Pablo Ugarte, #770244]

- Misc bug fixes [Philip Chimento, Alexander Larsson]

Version 1.47.0
--------------

- New API: GLib.log_structured() is a convenience wrapper for the C function
  g_log_variant(), allowing you to do structured logging without creating
  GVariants by hand. For example:

  GLib.log_structured('test', GLib.LogLevelFlags.LEVEL_WARNING, {
      'MESSAGE': 'Just a test',
      'A_FIELD': 'A value',
  });

- Backwards-incompatible change: we have changed the way gjs-console interprets
  command-line arguments. Previously there was a heuristic to try to decide
  whether "--help" given on the command line was meant for GJS itself or for a
  script being launched. This did not work in some cases, for example:

  $ gjs -c 'if (ARGV.indexOf("--help") == -1) throw "ugh"' --help

  would print the GJS help.

  Now, all arguments meant for GJS itself must come _before_ the name of the
  script to execute or any script given with a "-c" argument. Any arguments
  _after_ the filename or script are passed on to the script. This is the way
  that Python handles its command line arguments as well.

  If you previously relied on any -I arguments after your script being added to
  the search path, then you should either reorder those arguments, use GJS_PATH,
  or handle -I inside your script, adding paths to imports.searchPath manually.

  In order to ease the pain of migration, GJS will continue to take those
  arguments into account for the time being, while still passing them on to the
  script. A warning will be logged if you are using the deprecated behaviour.

- News for GJS embedders such as gnome-shell:

  * Removed API: The gjs-internals-1.0 API is now discontinued. Since
    gnome-shell was the only known user of this API, its pkg-config file has
    been removed completely and gnome-shell has been patched not to use it.

- Closed bugs:

  * make check fails with --enable-debug / -DDEBUG spidermonkey [Philip
    Chimento, #573335]
  * Modernize autotools configuration [Philip Chimento, #772027]
  * overrides/GLib: Add log_structured() - wrapper for g_log_variant() [Jonh
    Wendell, #771598]
  * Remove gjs-internals-1.0 API [Philip Chimento, #772386]
  * Add support for boolean, gunichar, and 64-bit int arrays [Philip Chimento,
    #772790]
  * add a --version flag [Philip Chimento, #772033]
  * Switch to AX_COMPILER_FLAGS and compile warning-free [Philip Chimento,
    #773297]
  * Reinstate importer test [Philip Chimento, #773335]

Version 1.46.0
--------------

- Be future proof against Format fixes in SpiderMonkey [Giovanni Campagna,
  #770111]

Version 1.45.4
--------------
- Release out args before freeing caller-allocated structs [Florian Müllner,
  #768413]
- Marshal variable array-typed signal arguments [Philip Chimento, Florian
  Müllner, #761659]
- Marshal all structs in out arrays correctly [Philip Chimento, #761658]
- Call setlocale() before processing arguments [Ting-Wei Lan, #760424]
- Build fixes and improvements [Philip Chimento, #737702, #761072] [Hashem
  Nasarat, #761366] [Carlos Garnacho, #765905] [Simon McVittie, #767368]
  [Emmanuele Bassi] [Michael Catanzaro] [Matt Watson]

Version 1.45.3
--------------

- Support external construction of gjs-defined GObjects [Florian Müllner,
  #681254]
- Add new format.printf() API [Colin Walters, #689664]
- Add new API to get the name of a repository [Jasper St. Pierre, #685413]
- Add C to JS support for arrays of flat structures [Giovanni Campagna,
  #704842]
- Add API to specify CSS node name [Florian Müllner, #758349]
- Return value of default signal handler for "on_signal_name" methods
  [Philip Chimento, #729288]
- Fix multiple emissions of onOverwrite in Tweener [Tommi Komulainen, #597927]
- Misc bug fixes [Philip Chimento, #727370] [Owen Taylor, #623330]
  [Juan RP, #667908] [Ben Iofel, #757763]

Version 1.44.0
--------------

- Add Lang.Interface and GObject.Interface [Philip Chimento, Roberto Goizueta,
  #751343, #752984]
- Support callbacks with (transfer full) return types [Debarshi Ray, #750286]
- Add binding for setlocale() [Philip Chimento, #753072]
- Improve support to generate code coverage reports [Sam Spilsbury, #743009,
  #743007, #742362, #742535, #742797, #742466, #751732]
- Report errors from JS property getters/setters [Matt Watson, #730101]
- Fix crash when garbage collection triggers while inside an init function
  [Sam Spilsbury, #742517]
- Port to CallReceiver/CallArgs [Tim Lunn, #742249]
- Misc bug fixes [Ting-Wei Lan, #736979, #753072] [Iain Lane, #750688]
  [Jasper St. Pierre] [Philip Chimento] [Colin Walters]

Version 1.43.3
--------------

- GTypeClass and GTypeInterface methods, such as
  g_object_class_list_properties(), are now available [#700347]
- Added full automatic support for GTK widget templates [#700347,
  #737661] [Jonas Danielsson, #739739]
- Added control of JS Date caches to system module [#739790]
- Misc bug fixes and memory leak fixes [Owen Taylor, #738122]
  [Philip Chimento, #740696, #737701]

Version 1.42.0
--------------

- Fix a regression caused by PPC fixes in 1.41.91

Version 1.41.91
---------------

- Added the ability to disable JS language warnings [Lionel Landwerlin,
  #734569]
- Fixed crashes in PPC (and probably other arches) due to invalid
  callback signatures [Michel Danzer, #729554]
- Fixed regressions with dbus 1.8.6 [Tim Lunn, #735358]
- Readded file system paths to the default module search, to allow
  custom GI overrides for third party libraries [Jasper St. Pierre]

Version 1.41.4
--------------

- Fixed memory management of GObject methods that unref their instance
  [#729545]
- Added a package module implementing the
  https://wiki.gnome.org/Projects/Gjs/Package application conventions
  [#690136]
- Misc bug fixes

Version 1.41.3
--------------

- Fixed GObject and Gtk overrides [Mattias Bengtsson, #727781] [#727394]
- Fixed crashes caused by reentrancy during finalization [#725024]
- Added a wrapper type for cairo regions [Jasper St. Pierre, #682303]
- Several cleanups to GC [#725024]
- Thread-safe structures are now finalized in the background, for greater
  responsiveness [#725024] [#730030]
- A full GC is now scheduled if after executing a piece of JS we see
  that the RSS has grown by over 150% [Cosimo Cecchi, #725099] [#728048]
- ParamSpecs now support methods and static methods implemented by glib
  and exposed by gobject-introspection, in addition to the manually
  bound fields [#725282]
- Protototypes no longer include static properties or constructors [#725282]
- Misc cleanups and bugfixes [Mattias Bengtsson, #727786] [#725282]
  [Lionel Landwerlin, #728004] [Lionel Landwerlin, #727824]

Version 1.40.0
--------------

- No changes

Version 1.39.90
---------------

- Implemented fundamental object support [Lionel Landwerlin, #621716, #725061]
- Fixed GIRepositoryGType prototype [#724925]
- Moved GObject.prototype.disconnect() to a JS implementation [#698283]
- Added support for enumeration methods [#725143]
- Added pseudo-classes for fundamental types [#722554]
- Build fixes [Ting-Wei Lan, #724853]

Version 0.3 (03-Jul-2009)
-------------------------

Changes:
    - DBus support
      At a high level there are three pieces. First, the "gjs-dbus" library is
      a C support library for DBus.  Second, the modules/dbus*.[ch] implement
      parts of the JavaScript API in C.  Third, the modules/dbus.js file fills
      out the rest of the JavaScript API and implementation.
    - Support simple fields for boxed types
    - Support "copy construction" of boxed types
    - Support simple structures not registered as boxed
      - Allow access to nested structures
      - Allow direct assignment to nested structure fields
      - Allow enum and flag structure fields
      - Allow creating boxed wrapper without copy
    - Support for non-default constructor (i.e. constructors like
      GdkPixbuf.Pixbuf.new_from_file(file))
    - Add a Lang.bind function which binds the meaning of 'this'
    - Add an interactive console gjs-console
    - Allow code in directory modules (i.e. the code should reside in
      __init__.js files)
    - Fix handling of enum/flags return values
    - Handle non-gobject-registered flags
    - Add Tweener.registerSpecialProperty to tweener module
    - Add profiler for javascript code
    - Add gjs_context_get_all and gjs_dumpstack - useful to invoke from a
      debugger such as gdb
    - Support GHashTable
      - GHashTable return values/out parameters
      - Support GHashTable 'in' parameters
      - Convert JSON-style object to a GHashTable
    - Add support for UNIX shebang (i.e. #!/usr/bin/gjs-console)
    - Support new introspection short/ushort type tags
    - Support GI_TYPE_TAG_FILENAME
    - Improve support for machine-dependent integer types and arrays of
      integers
    - Fix several memory leaks

Contributors:
    Colin Walters, C. Scott Ananian, Dan Winship, David Zeuthen,
    Havoc Pennington, Johan Bilien, Johan Dahlin, Lucas Rocha,
    Marco Pesenti Gritti, Marina Zhurakhinskaya, Owen Taylor,
    Tommi Komulainen

Bugs fixed:
    Bug 560506 - linking problem
    Bug 560670 - Turn on compilation warnings
    Bug 560808 - Simple field supported for boxed types
    Bug 561514 - memory leak when skipping deprecated methods
    Bug 561516 - skipping deprecated methods shouldn't signal error case
    Bug 561849 - Alternate way of connecting signals.
    Bug 562892 - valgrind errors on get_obj_key
    Bug 564424 - Add an interactive console
    Bug 564664 - Expose JS_SetDebugErrorHook
    Bug 566185 - Allow code in directory modules
    Bug 567675 - Handle non-gobject-registered flags
    Bug 569178 - Add readline support to the console module
    Bug 570775 - array of parameters leaked on each new GObject
    Bug 570964 - Race when shutting down a context, r=hp
    Bug 580948 - Add DBus support
    Bug 584560 - Add support for UNIX shebang
    Bug 584850 - Clean up some __BIG definitions.
    Bug 584858 - Fix errors (and leftover debugging) from dbus merge.
    Bug 584858 - Move gjsdbus to gjs-dbus to match installed location.
    Bug 585386 - Add a flush() method to DBus bus object.
    Bug 585460 - Fix segfault when a non-existing node is introspected.
    Bug 586665 - Fix seg fault when attempting to free callback type.
    Bug 586760 - Support converting JavaScript doubles to DBus int64/uint64.
    Bug 561203 - Fix priv_from_js_with_typecheck() for dynamic types
    Bug 561573 - Add non-default constructors and upcoming static methods to "class"
    Bug 561585 - allow using self-built spidermonkey
    Bug 561664 - Closure support is broken
    Bug 561686 - Don't free prov->gboxed for "has_parent" Boxed
    Bug 561812 - Support time_t
    Bug 562575 - Set correct GC parameters and max memory usage
    Bug 565029 - Style guide - change recommendation for inheritance
    Bug 567078 - Don't keep an extra reference to closures
    Bug 569374 - Logging exceptions from tweener callbacks could be better
    Bug 572113 - add profiler
    Bug 572121 - Invalid read of size 1
    Bug 572130 - memory leaks
    Bug 572258 - profiler hooks should be installed only when needed
    Bug 580865 - Call JS_SetLocaleCallbacks()
    Bug 580947 - Validate UTF-8 strings in gjs_string_to_utf8()
    Bug 580957 - Change the way we trigger a warning in testDebugger
    Bug 581277 - Call JS_SetScriptStackQuota on our contexts
    Bug 581384 - Propagate exceptions from load context
    Bug 581385 - Return false when gjs_g_arg_release_internal fails
    Bug 581389 - Fix arg.c to use 'interface' instead of 'symbol'
    Bug 582686 - Don't g_error() when failing to release an argument
    Bug 582704 - Don't depend on hash table order in test cases
    Bug 582707 - Fix problems with memory management for in parameters
    Bug 584849 - Kill warnings (uninitialized variables, strict aliasing)
    Bug 560808 - Structure support


Version 0.2 (12-Nov-2008)
-------------------------

Changes:
    - Compatible with gobject-introspection 0.6.0
    - New modules: mainloop, signals, tweener
    - Support passing string arrays to gobject-introspection methods
    - Added jsUnit based unit testing framework
    - Improved error handling and error reporting

Contributors:
    Colin Walters, Havoc Pennington, Johan Bilien, Johan Dahlin, Lucas Rocha,
    Owen Taylor, Tommi Komulainen

Bugs fixed:
    Bug 557398 – Allow requiring namespace version
    Bug 557448 – Enum and Flags members should be uppercase
    Bug 557451 – Add search paths from environment variables
    Bug 557451 – Add search paths from environment variables
    Bug 557466 – Module name mangling considered harmful
    Bug 557579 – Remove use of GJS_USE_UNINSTALLED_FILES in favor of GI_TYPELIB_PATH
    Bug 557772 - gjs_invoke_c_function should work with union and boxed as well
    Bug 558114 – assertRaises should print return value
    Bug 558115 – Add test for basic types
    Bug 558148 – 'const char*' in arguments are leaked
    Bug 558227 – Memory leak if invoked function returns an error
    Bug 558741 – Mutual imports cause great confusion
    Bug 558882 – Bad error if you omit 'new'
    Bug 559075 – enumerating importer should skip hidden files
    Bug 559079 – generate code coverage report
    Bug 559194 - Fix wrong length buffer in get_obj_key()
    Bug 559612 - Ignore deprecated methods definitions.
    Bug 560244 - support for strv parameters


Version 0.1 
-----------

Initial version! Ha!
